TODO:
=====
- post paper
	- tool
		- write DFA (hopcroft) minimization
		- add syntax to define tau: tau is "def" 
			- implement by default will be named tau and added as first element

		- esconder etiquetas
			\{term_1,...,term_N}
				- terms can be indexed, either by range or variable			
			- replace with tau if turns empty (wasn't empty before)
			\{term_1,....,term_N}_s
			- doesn't replace with tau
		- add observational minimization according to CCS expressions ... 
			- replace with tau
			- minimize transitions where only tau is left (if it was non empty and turns empty)
		- add syntax to minimize
			- minimization as NEW = (OLD).
		- add syntax to minimize observationally
			- observational minimization as NEW = (OLD).			
		- revisar layout convencional de linux (bin, lib, etc)
		- armar cmake
			- agregar CLTSA_PATH a entorno
			- agregar un install
		- agregar una salida que reporte el avance del proceso de síntesis diagnóstico
			- en un archivo dentro de CLTSA_PATH/output/
		- si al iniciar no encuentra CLTSA_PATH que avise y exit
		- que AUTOMATA >> . saque a un archivo por defecto CLTSA_PATH/output/name.rep
	- editor
		- si al iniciar no encuentra CLTSA_PATH que avise y exit
		- que el binario lo tome de CLTSA_PATH
		- marcar línea del error en el editor por syntax error, agregar linenumber y pos a los syntax def de paser_utils, automaton_context
		- habilitar line number en el editor
		- undo/redo 
		- improve report loading from java client (automatically load exports)
			- que cargue de CLTSA_PATH/output/
		- allow several specs to be loaded concurrently (tabs)
		- syntax highlight strings
		- signals view as complement to automaton
	- serializacion
		- serializar valuaciones
		- reimplementar volcando el contenido binario de arreglos
			- trans
			- valuaciones
		- evaluar agregar utilidades de compresión
			-https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm		
	- exportar a vdhl
		- versión básica
	- re-escribir versión ahb genbuf, revisar realizabilidad-no realizabilidad
		- testear y comparar con valuaciones por estados
			- ahb_1_n	
				- completo			
		- correr tests
	- estados por referencia (si se complica ni bola)
	- revisar 
		- patterns for property specification ...
		- Compositional Model Checking for Multi-properties
		- gcov
	
- clts	
	- composición
		- rediseñar algoritmo de composicion
		- justificar tipos de composicion https://www.eetimes.com/understanding-clock-domain-crossing-issues/
		- w.r.t. ||* prove clts -> lts cannot preserve consistency with parallel composition
	- agregar representación redundante para el juego (sin informacion de etiquetas)
	- revisar representación de rankings
	- indices y constantes para ltl game structures
	- review 
		-event structures
		-pom sets
	- Dalal, write monitored adjustment operator
		- syntax
		- operation
	- examples
		- write amba version from Synthesis of AMBA AHB from Formal Specification:A Case Study
			- specify master
			- specify slave	
		- prove correct decomposition of ahb arbiter into modules
	- examples
		- use mm512 operations for ordered list in aut_push_string_to_list
		- check spectra (maoz) repository for unrealizable specs
		- review https://www.cl.cam.ac.uk/~sf502/regressions/rmem/help.html for examples
		- update values and validation section
		- run tests for genbuf 4, 5, 6
	- for non-realizability reduce diagnosis to single liveness goal not being satisfied
	- see if following changes are worth the worry
		- add transition disabling to speed up minimization time (should do enabled_in_degree and enabled_out_degree)
			- change seems to be too expensive in terms of refactoring to be worthy, since it may not prove useful once automaton copy is not as frequent
		- in dd minimization keep track of mins. tested as tested: bitvector -> 0 not tested, 1 realizable, 2 non realizable
			should be able to only keep as many in terms of the dd step
			- check current minimization bitvector m with previous minimization bitvector p
				if at any step p_i & m_i != p_i skip p (was not less or equal than m)
				if check completes then use p result for m
	- jvts for clts
	- explore controllable simplification
		- hide queue in genbuf (hide signals, tau reduction)
		- review konighoefer work
	- implement formulaic labels, [!lock && !start]G2 = ( lock && start -> G2), 
		will create an automaton by initializing variables as defined in [v] and defining transitions by those who satisfhy
		rho(v, v', s, s')
	- implement fluent consistency check
	- review and relate gamma sat notion from symbolic repair with non trivial controllers, add check, compare to mtsa
	- diagnose mutation over small parameters, produce hypothesis, scale both hypothesis and parameter to see if it holds
	
- minimización de controladores
	- idea vieja
		- quedarse con el autómata donde se esconden las trans. controlables
		- meter en pending todos estados donde se cambia valuación
		- para cada estado en pending renombrar etiquetas de transiciones sacando las que estén compartidas entre todas las transiciones
		- agregar a pending los pred.
		- cuando se vacía pending se pueden reemplazar las tiras de estados lineales por contadores A = (when(t < len) -> A | when(t == len) -> A_2).
		- revisar minimización de autómatas 
	- idea nueva
		- quitar todas las no controlables que se pueda
			- ver si se puede probar complejidad del problema
		- correr minimización de hopcroft sobre el resultado
	- agregar #include (archivos por clausura, evaluar no haya ciclos) y #define (con parámetros)
- mu calculus para clts
- revisar como se extrae la estrategia del ranking clts	
- assume guarantee para sistemas abiertos
- para responder no realizabilidad, se pueden inicializar los rankings en max-delta -1 y ver si se estabiliza ahí?
- pvs
	- review 
		- https://www.mat.unb.br/~ayala/pvsclass17/
		- http://fm.csl.sri.com/SSFT11/ITPSummerFormal2011.pdf
	- read and run http://www.fit.vutbr.cz/~matousp/doc/2001/mosis01.html
	- write clts props
	- read and run https://www.irif.fr/~haberm/ADVANCE/Year3/Papers/PA.ps
	- write ltl props
	- write simplest embedding
POST PHD
========
- develop mixed structures 
	- EROBDD (enumerative ROBDD) first node determines current state
	  s -[s1] -> s_1 | ... | s -[sk] -> s_k, the seconde node
	  (not sure if should be last one) determines next state,for each transition
	  s_i -> s_j where there are signal changes those are added, if signal
	  v is set between s_i,s_j then v is false in V and true in V',
	  recreate this o EROBDD s_i, s' branch, then the EROBDD is minimized, first
	  as OBDDs then, for equivalent state nodes, merges are represented as 
	  intervals S_{1,4,[7,12]} and so on
	- define apply:EROBDD x OBDD -> EROBDD (where an OBDD is restricted by
	  an EROBDD)
	- define EROBDD valuations
	- write definitions and lemmas
	- implement and test against existing examples
- [automata-reporter]
	- integration of cfsp editor (parsing error location info)
	- partial automaton exploration for big automata (jung adaptation with outgoing dashed labels)
- adapt examples from https://www.doulos.com/knowhow/psl/
- implement symbolic synthesis
- implement diagnosis of maximal realizable ltl spec (maximal set of ltl formula s.t. at least one liveness is satisfied)
- aparte de <a,b,c> introducir >a,b,c< que define concurrencia débil, puede transicionar con un subconj de estos
- implement reachability
- yacc and automaton_context -> define a way to index concurrent labels, it is not the same to index particular labels (thus adding new transitions
		for each index) than to add index to concurrent labels (adding new transitions on the whole concurrent set)
- evaluation of expressions with free variables should be able to evaluate fluent valuations and constants, maybe even a random value generator with constant seed
range R = 1..2
A = ( <a, b[i:R], c[j:R]> -> A). should translate to A = ( {<a,b.1,c.1>, <a,b.2,c.1>, <a,b.1,c.2>, <a,b.2,c.2>}->A).
A = ( <a, b[i], c[i]>[i:R] -> A). should translate to A = ( {<a,b.1,c.1>, <a,b.2,c.2>}->A).
- add feedback for errors
- partitioned composition, everything not on the frontier can be downloaded to a bucket list of files in order to free the memory
- keep indexes and other information in the automaton structure (concolyc style)
