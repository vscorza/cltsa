TODO:
SPRINT1
- do indexed states first to test composition performance
- prefixes, indexes on sets, states, transitions
	automaton_context.c -> automaton_statement_syntax_to_automaton -> update transitions with indexes, prefixes when composing (several components)
						-> automaton_statement_syntax_to_automaton -> ... (single component)
						-> automaton_set_syntax_evaluate -> (along with yacc file) allow prefixed, indexed elements
						-> automaton_statement_syntax_to_automaton -> solve state refs in automaton
- evaluation of expressions with free variables (needs a valuation context)
- review and document code (particualarly compose)
SPRINT2
- parse assertions, goals
- parse safety ltl
- check compatibility with fluents when composing
- implement reachability
- implement gr1
SPRINT3
	yacc and automaton_context -> define a way to index concurrent labels, it is not the same to index particular labels (thus adding new transitions
		for each index) than to add index to concurrent labels (adding new transitions on the whole concurrent set)
range R = 1..2
A = ( <a, b[i:R], c[j:R]> -> A). should translate to A = ( {<a,b.1,c.1>, <a,b.2,c.1>, <a,b.1,c.2>, <a,b.2,c.2>}->A).
A = ( <a, b[i], c[i]>[i:R] -> A). should translate to A = ( {<a,b.1,c.1>, <a,b.2,c.2>}->A).
- add feedback for errors
SPRINTX
- keep indexes and other information in the automaton structure (concolyc style)
- merge obdd and lts
