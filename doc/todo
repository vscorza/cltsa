TODO:
=====
- implementar recortes para clts
- cltsa
	- definicion de valuaciones por estados
		x definir sintaxis
		- implementar cambios
			- import/export actualizar con informacion de vstates
				- importer
					x automaton_automaton_check_load_context
					x automaton_automaton_load_report
				- experiment launcher
					- update importing
			- composición		
				- sólo se chequea conformidad sobre modelos declarados explicitamente, si un modelo no predica sobre una valuación no se lo tiene en cuenta para restringir la composición
			- conversión a modelos
				- probar 
					- sintaxis básica
						- 1 estado por nombre
						- 3 estados por nombre
						- nombre y 2 rangos
						- idem 2 automátas
			- agregar debugging output						
			- composición		
				- agregar debugging output
				- probar 
					- sintaxis básica
						- 1 estado por nombre en 2 automatas
						- 3 estados por nombre en 2 automátas
						- nombre y 2 rangos en 3 autómatas
		- revisar tests
		- definir casos de estudio
		- re escribir tests
			- de implementacion
		- correr tests
	- traducción a lts
		- formalizar
			- qué pasa con estados mixtos?
			- ejemplo biscotti
				- revisar legalidad asynch/synch
				- hay noción superadora o son semánticas distintas?
		- definir casos de estudio
		- escribir tests
			- de implementacion
		- escribir traducción
		- correr tests
-re-escribir casos de estudio
	- definicion de valuaciones por estados
- plan de trabajo para diagnostico
	- armar caso para lts
	- tablas comparativas
	- introducir clts como necesidad para ejecutar los casos (refs de definitions nuevo)
	- ref. a un arxiv
	- re escribir problema y solución
- cltsa
	- serializacion
		- reimplementar volcando el contenido binario de arreglos
			- trans
			- valuaciones
		- agregar utilidades de compresión
			-https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm			

- rankings
	- mejorar legibilidad de pruebas
	- armar ejemplos
- revisar como se extrae la estrategia del ranking clts	
- para responder no realizabilidad, se pueden inicializar los rankings en max-delta -1 y ver si se estabiliza ahí?
- add cites
	- DFS cited from "Verification by Augmented Finitary Abstraction"
	- Presented in "Algorithmic verification of linear temporal logic specifications"
	- Taken from DTS "Temporal Verification of Reactive Systems: Safety"
- fds -> clts
	- propose ranking approach, for mixed transitions the ranking si defined as:
		project monitored alphabet and take the one representative for each and set the
		ranking of the candidate as the min within the group
- plan clts <-> lts 
- prove translations between FLTL and AccLTL (E x F -> E' with new states and accepting sets)
- update clts strategy
- pvs
	- review 
		- https://www.mat.unb.br/~ayala/pvsclass17/
		- http://fm.csl.sri.com/SSFT11/ITPSummerFormal2011.pdf
	- read and run http://www.fit.vutbr.cz/~matousp/doc/2001/mosis01.html
	- write clts props
	- read and run https://www.irif.fr/~haberm/ADVANCE/Year3/Papers/PA.ps
	- write ltl props
	- write simplest embedding
- clts w.r.t. ||*
	- prove clts -> lts cannot preserve consistency with parallel composition
	- review 
		-event structures
		-pom sets
- counterstrategy
	X run in spectra our running example
	- ours is smaller
- validation
	- corrimos todo lo de konighoefer y escalamos hasta donde pudimos
	- corrimos uno de cada tipo de maoz, traducido a mano
		- comparar con jvts y decir que diagnosticamos
		- escribir a maoz
- picking criteria
	- overall review last paper to the best of our knowledge, list of papers, try all, one of each, but clear
		- define criteria
		- add and expand list from validation
		- explain that everything with liveness from syntcomp (define proper criteria)
			- has simplified arbiter (not included bc it was covered by ahb genbuf)
			- then we found collector and AHB - Genbuf
		- explain how per case which mutations were evaluated
		- rephrase scalability add it as a point to validation
		- explain that there why there are no other liveness specs from syntcomp (if ahb is not added)
- vic changes
    	- Cross-paper keep consistent terminology according to what is kept in the background section
	- Motivation review example, doesn't like the safety keep condition, "idle controller"
- do a general review on validation and related work
- discussion
	- move references to symbolic to discussion
- meeting

- after paper
	- Dalal, write monitored adjustment operator
		- syntax
		- operation
	- examples
		- write amba version from Synthesis of AMBA AHB from Formal Specification:A Case Study
			- specify master
			- specify slave	
		- prove correct decomposition of ahb arbiter into modules
	- phd meeting	
		- plan paper for clts, tool and general thesis layout
	- review master thesis subjects for p d crisfoforis
	- examples
		- add syntax support (state fluent XX = (s_i, ..., s_j) in name.
		- use mm512 operations for ordered list in aut_push_string_to_list
		- review ciolek thesis
		- write example from ltl_paxos_2 paper (Towards Modeling and Model Checking Fault-Tolerant Distributed Algorithms) (https://www.youtube.com/watch?v=-Bl5GleEN5s)
		- ivy (kenneth mcmillan)
			- add leader election/multi paxos example (https://www.discotec.org/2020/invited#kenneth-mcmillan)
			- risc v memory coherence
		- check spectra (maoz) repository for unrealizable specs
		- review https://www.cl.cam.ac.uk/~sf502/regressions/rmem/help.html for examples
		- update values and validation section
		- run tests for genbuf 4, 5, 6
	- allow to define buchi fluent based on accepting state, for instance for automaton based properties in genbuf
		- transform values as in fluents
		- write tests
		- run test and profile
		- test genbuf and amba with automata
	- for non-realizability reduce diagnosis to single liveness goal not being satisfied
	- run tests with dd, linear, dd wo last_partition optimization, goal minimization
	- java client
		- improve report loading from java client (automatically load exports)
		- allow several specs to be loaded concurrently (tabs)
		- syntax highlight strings
		- undo/redo 
		- signals view as complement to automaton
	- add exception when FIXED_SIGNALS_COUNT or BITVECTOR_ENTRY_SIZE is not enough, add parameters to make
	- review literature and tools
		- review Interpolation-Based Semantic Gate Extraction and its Applications to QBF Preprocessing (https://www.ac.tuwien.ac.at/people/fslivovsky/)	
		- review papers gr_1_star, performance_heuristics for gr1, minimal assumption refinement gr1 and synthesizing adaptive test stategies papers
		- review jits from maoz, subash shankar work https://dblp.org/pers/s/Shankar:Subash.html, Modular Synthesis of Reactive Programs Aalok Thakkar, Kedar Namjoshi, Richard Trefler
		- review minisat
	- see if following changes are worth the worry
		- add transition disabling to speed up minimization time (should do enabled_in_degree and enabled_out_degree)
			- change seems to be too expensive in terms of refactoring to be worthy, since it may not prove useful once automaton copy is not as frequent
		- in dd minimization keep track of mins. tested as tested: bitvector -> 0 not tested, 1 realizable, 2 non realizable
			should be able to only keep as many in terms of the dd step
			- check current minimization bitvector m with previous minimization bitvector p
				if at any step p_i & m_i != p_i skip p (was not less or equal than m)
				if check completes then use p result for m

	- see if following changes are worth the worry
		- further improve reports
			- report separate synthesis cases individually within same file
			- report composition times independently from model build	
	- jvts for clts
	- explore controllable simplification
		- hide queue in genbuf (hide signals, tau reduction)
		- review konighoefer work
	- implement formulaic labels, [!lock && !start]G2 = ( lock && start -> G2), 
		will create an automaton by initializing variables as defined in [v] and defining transitions by those who satisfhy
		rho(v, v', s, s')
	- graph the way removed transitions increment in the lineal minimization
	- split functionality into several files, refactor
	- synthesis improvements
		- take bigger values first on synthesis
		- take noncontrollable states first on synthesis
		- keep inf scc over rankings
	- compare against konighoefer and jvts systems, write experimental claim
	- implement fluent consistency check
	- implement IS_REALIZABLE(gr1). on parser
	- review and relate gamma sat notion from symbolic repair with non trivial controllers, add check, compare to mtsa
	- diagnose mutation over small parameters, produce hypothesis, scale both hypothesis and parameter to see if it holds
POST PHD
========
- develop mixed structures 
	- EROBDD (enumerative ROBDD) first node determines current state
	  s -[s1] -> s_1 | ... | s -[sk] -> s_k, the seconde node
	  (not sure if should be last one) determines next state,for each transition
	  s_i -> s_j where there are signal changes those are added, if signal
	  v is set between s_i,s_j then v is false in V and true in V',
	  recreate this o EROBDD s_i, s' branch, then the EROBDD is minimized, first
	  as OBDDs then, for equivalent state nodes, merges are represented as 
	  intervals S_{1,4,[7,12]} and so on
	- define apply:EROBDD x OBDD -> EROBDD (where an OBDD is restricted by
	  an EROBDD)
	- define EROBDD valuations
	- write definitions and lemmas
	- implement and test against existing examples
- [automata-reporter]
	- integration of cfsp editor (parsing error location info)
	- partial automaton exploration for big automata (jung adaptation with outgoing dashed labels)
	- alla RATSY signal reporting for automaton
- document obdd
- adapt examples from https://www.doulos.com/knowhow/psl/
- solve aliases in states e.g. S[i:R] = S_p[i], S_p[i:R] = (s->S_2[i]).
- implement relabeling and hiding (use half adder to full adder example)
- implement symbolic synthesis
- implement diagnosis of maximal realizable ltl spec (maximal set of ltl formula s.t. at least one liveness is satisfied)
- aparte de <a,b,c> introducir >a,b,c< que define concurrencia débil, puede transicionar con un subconj de estos
- implement reachability
- yacc and automaton_context -> define a way to index concurrent labels, it is not the same to index particular labels (thus adding new transitions
		for each index) than to add index to concurrent labels (adding new transitions on the whole concurrent set)
- evaluation of expressions with free variables should be able to evaluate fluent valuations and constants, maybe even a random value generator with constant seed
range R = 1..2
A = ( <a, b[i:R], c[j:R]> -> A). should translate to A = ( {<a,b.1,c.1>, <a,b.2,c.1>, <a,b.1,c.2>, <a,b.2,c.2>}->A).
A = ( <a, b[i], c[i]>[i:R] -> A). should translate to A = ( {<a,b.1,c.1>, <a,b.2,c.2>}->A).
- add feedback for errors
- partitioned composition, everything not on the frontier can be downloaded to a bucket list of files in order to free the memory
- keep indexes and other information in the automaton structure (concolyc style)

Meetings
========
2019-10-16 meeting
- How does CLTS control problem compares to LTS cp? Does every CLTS control problem can be encoded as LTS?
- Where is the benefit when solving hardware specs? Is it in the formalism or the tool?
- What happens with the language of the composition? does the components languages are included in the target?
- Explain the motivation behind the availability of two composition semantics, motivate it as allowing encapsulation of synch component asynchronous composed with another (or viceversa)
