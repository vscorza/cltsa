TODO:
SPRINT1
- for gr1 preallocate pending states and rankings
	para esto crear un bucket list con punteros a funciones que hagan la realocación, la extracción de la clave
	la copia y el cálculo de aritmética de puntero, se mantiene una lista de bool de si el elemento está asignado o no,
	el count(efectivo), size (tamaño) y length(count viejo, tiene asignados y no) cuando el count/length pasa cierto threshold
	se puede disparar una limpieza que reacomoda los elementos en el bucket para evitar disparar resizes innecesarios 
	
- probar amba con concurrent labels
- fluents transitions should be applied to superset of alphabet
SPRINT2
- aparte de <a,b,c> introducir >a,b,c< que define concurrencia débil, puede transicionar con un subconj de estos
- parse assertions, goals
- parse safety ltl
- check compatibility with fluents when composing
- implement reachability
SPRINT3
- yacc and automaton_context -> define a way to index concurrent labels, it is not the same to index particular labels (thus adding new transitions
		for each index) than to add index to concurrent labels (adding new transitions on the whole concurrent set)
- evaluation of expressions with free variables should be able to evaluate fluent valuations and constants, maybe even a random value generator with constant seed
range R = 1..2
A = ( <a, b[i:R], c[j:R]> -> A). should translate to A = ( {<a,b.1,c.1>, <a,b.2,c.1>, <a,b.1,c.2>, <a,b.2,c.2>}->A).
A = ( <a, b[i], c[i]>[i:R] -> A). should translate to A = ( {<a,b.1,c.1>, <a,b.2,c.2>}->A).
- add feedback for errors
SPRINTX
- partitioned composition, everything not on the frontier can be downloaded to a bucket list of files in order to free the memory
- keep indexes and other information in the automaton structure (concolyc style)
- merge obdd and lts
