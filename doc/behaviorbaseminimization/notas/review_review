Action Items
============
	1. Revisar definiciones (1.1, 2.3)
	2. Revisar la motivación involucrando lo que se pide en 3.2 (reparación progresiva), 1.Q.1, 2.4 (diferencia entre semántico y sintáctico), 2.4 (complementación con las técnicas existentes), 1.2 (diferencia positiva con técnicas existentes) y 1.3 (dificultad de comparar con especificaciones simbólicas)
	3. Preparar página o repositorio para replicar los experimentos
	6. Revisar o justificar mixed states
	7. Explicar que pasa si hay más de un conflicto y sugerir como sería un esquema que genera más de un representante minimal
	8. Revisar typos y gramática

Review 1 - Weak reject
	1.1 Incomplete formalism: 
		1.1.1 no fltl semantics (non standard), 
		1.1.2 fluents as normal propositions, 
		1.1.3 legal environment def incomplete, 
		1.1.4 interface automaton def missing
	1.2 Insufficient motivation: 
		1.2.1 why not use ltl based approaches, 
		1.2.2 no diff explanation between semantic and syntactic minimization
	1.3 Improper evaluation: 
		1.3.1 no 3rd party evaluation, 
		1.3.2 no comparison with other tools
		1.3.3 discrepances in numbers
	1.4 Typos and grammar
	1.Q Questions
		1.Q.1 Can you illustrate using a short example the difference between syntactic and semantic minimization, and argue which one is better?
		1.Q.2 Can you justify using a small example why allowing automatons as environments has advantages over environments specified using LTL?
		1.Q.3 Since your case studies were anyway originally specified using LTL, why did you not empirically compare your tool with the LTL-formula

Resumen review response
=======================
Review 2 - Weak reject
	2.1 The practical applicability may be limited unless implemented in a high-level tool that abstracts from the underlying automata. The authors' assumption that feedback of their approach can be used by engineers to understand causes of unrealizability assumes that engineers design and understand automata-based system specifications. This is controversial. Nevertheless, I appreciate the theoretical contribution. Do the authors foresee practical applicability that I fail to see?
	2.2 Typos and grammar
	2.3 Several notions are not well explained or not explained at all (more below): GR(1), plant, SGR(1), JVTSs
	2.4 The authors claim that their technique also has the potential to complement	existing techniques that work by syntactic rather than semantic minimization, but do not support this claim with any evidence or further explanation. Can the authors expand on this?
	2.5 The authors do not provide any information in the paper concerning replicability, even though the call for papers clearly states that "The evaluation of submissions will take into account the extent to which sufficient information is available to support the full or partial independent replication of the claimed findings."
	2.Q Questions
		2.Q.1 The practical applicability may be limited unless implemented in a high-level tool that abstracts from the underlying automata. The authors' assumption that feedback of their approach can be used by engineers to understand causes of unrealizability assumes that engineers design and understand automata-based system specifications. This is controversial. Nevertheless, I appreciate the theoretical contribution. Do the authors foresee practical applicability that I fail to see?
		2.Q.2 The authors claim that their technique also has the potential to complement existing techniques that work by syntactic rather than semantic minimization, but do not support this claim with any evidence or further explanation. Can the authors expand on this?
		2.Q.3 The authors follow the assumption from [15], which is apparently their own work, that does not allow automata with so-called mixed states, in which both controlled and uncontrolled transitions are enabled. This seems a rather strong assumption.Could the authors explain the (technical) need for this assumption and discuss its (practical) consequences?

Review 3 - Weak reject
	3.1 The approach aims at minimizing the specification still mantaining unrealizability. One question that comes to my mind is what happens if there are more causes for unrealizability. The construction will provide one but there might exist more in the partially ordered search space that may or may not be of the same degree of minimality. It would be useful if the authors might add some comment on this.
	3.2 The way I better understand the approach is by looking at the proposed technique as a way to debug the original specification, in this respect it would be useful to see the technique as a step of a process that might eventually converge on a realizable specification.
	3.3 I am not familiar with all the literature referenced in the paper but I understand that the authors claim that the fact of working with an operational specification, i.e. LTS rather than with only logic formulas is a distinctive feature of the proposed approach. Honestly I cannot see the problem here, given that I imagine that a developer will possibly work neither with LTS or with LTL but with suitably packaged tools that hide internal details and can perform all kind of transformations in a black box fashion.
	3.Q what happens if there is more than one cause of unreliability?
