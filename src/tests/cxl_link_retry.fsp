const MAX_RETRY = 2
const MAX_REINIT = 2
const MAX_TIMEOUT = 3
range R_RETRY = 1..(MAX_RETRY + 1)
range R_REINIT = 1..(MAX_REINIT + 1)
range R_TIMEOUT = 1..(MAX_TIMEOUT + 1)

set Global_Alphabet = {phy.reset, phy.done, phy.pending, phy.reinit, phy.max, req, ack, error, to.max, to.reset}
set Controllable_Alphabet = {req, to.reset}

RETRY_AUT = RETRY[1],
RETRY[i:R_RETRY] = (
	phy.max -> ABORT |
	phy.reset -> RETRY_MAX |
	when (i < (MAX_RETRY + 1)) req -> RETRY[i + 1] |
	when (i < (MAX_RETRY + 1)) error -> RETRY[i] |
	when (i <= (MAX_RETRY + 1)) ack -> RETRY[1]  |
	when (i == (MAX_RETRY + 1)) phy.reinit -> RETRY_MAX 
	),
RETRY_MAX = (phy.done -> RETRY[1] | ack -> RETRY_MAX | phy.max -> ABORT).
RETRY_AUT >> "/tmp/cxl_RETRY.rep".

PHY_REINIT = PHY[1],
PHY[i:R_REINIT] = ( 
	when (i < (MAX_REINIT + 1)) {phy.reinit, phy.reset} -> PHY[i + 1] |
	when (i == (MAX_REINIT + 1)) phy.max -> PHY_MAX |
	when (i <= (MAX_REINIT + 1)) ack -> PHY[1]  |
	when (i <= (MAX_REINIT + 1)) {phy.pending, phy.done} -> PHY[i]
	).
PHY_REINIT >> "/tmp/cxl_PHY.rep".

PHY_LAYER = ( {phy.reinit, phy.reset} -> REINIT),
REINIT = ( phy.pending -> REINIT | phy.done -> PHY_LAYER).

LRSM = (error -> LLREQ | phy.reset -> PHY_REINIT | {phy.reset, phy.done} -> LRSM),
LLREQ = (req -> IDLE | error -> LLREQ | phy.max -> ABORT | {phy.reset, phy.done} -> LLREQ),
IDLE = ({error, req} -> IDLE | to.reset -> to.max -> LLREQ | ack -> to.reset -> LRSM | phy.reset -> PHY_REINIT ),
PHY_REINIT = (phy.pending -> PHY_REINIT | phy.done -> LLREQ).
LRSM >> "/tmp/cxl_LRSM.rep".

||REINIT_RETRY = (RETRY_AUT || PHY_REINIT || PHY_LAYER || LRSM).
REINIT_RETRY >> "/tmp/cxl_reinit_retry.rep".






RETRY_TIMEOUT = ({req, to.reset} -> RETRY_TIMEOUT | {req,error} -> TO[1]),
TO[i:R_TIMEOUT] = (
		to.reset -> RETRY_TIMEOUT |
		when (i < (MAX_TIMEOUT)) {req,error} -> TO[i + 1] |
		when (i == (MAX_TIMEOUT)) {req,error} -> TIMEOUT_MAX
		),
TIMEOUT_MAX = ( to.max -> TIMEOUT_MAX |  to.reset -> RETRY_TIMEOUT).
RETRY_TIMEOUT >> "/tmp/cxl_TIMEOUT.rep".

FLIT = (error -> PENDING),
PENDING = ({error, req} -> PENDING | ack -> FLIT).
FLIT >> "/tmp/cxl_FLIT.rep".

||LRSM_TIMEOUT = (LRSM || RETRY_TIMEOUT || PHY_REINIT || PHY_LAYER || FLIT).
LRSM_TIMEOUT >> "/tmp/cxl_lrsm_timeout.rep".


||SUV =  (LRSM || RETRY_TIMEOUT || PHY_REINIT	 || PHY_LAYER  || FLIT || LRSM).
SUV  >> "/tmp/cxl_suv.rep".
/*

vstate fluent F_NotCooking in BISCOTTI = {FINISHED, OVERHEATED}.
vstate fluent F_MoveToBelt in BISCOTTI = {0}.//BISCOTTI
|f| ENV =(BISCOTTI || SUCCESSFULLY_COOKED_TWICE). 
|gr1| <{F_NotCooking}><{F_MoveToBelt}> STRAT = ENV.
vstate fluent F_REFINE in STATE_TESTER = {1}.
|f| STATE_TESTER_G = (STATE_TESTER).
|| ENV_TEST =(BISCOTTI || SUCCESSFULLY_COOKED_TWICE || STATE_TESTER). 
|f| ENV_TEST_G =(BISCOTTI || SUCCESSFULLY_COOKED_TWICE || STATE_TESTER).

|gr1| <{F_NotCooking}><{F_MoveToBelt,F_REFINE}> STRAT_TEST = ENV_TEST_G.
STRAT_p = S_0,
S_0 = (cook-> S_1),
S_1 = (cooking-> S_1|finishedCooking-> S_2),
S_2 = (cook-> S_3),
S_3 = (cooking-> S_3|finishedCooking-> S_5),
S_5 = (moveToBelt-> S_0).

// tests
equals FATAL_Biscotti_Strategy_Vstates(STRAT, STRAT_p).
equals FATAL_Biscotti_Strategy_Composed_Vstates(STRAT_TEST, STRAT_TEST_p).
*/
