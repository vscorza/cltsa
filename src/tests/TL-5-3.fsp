const Machines = 5
const Workload = 3
const Capacity = 3
range R_Machines = 0..Machines
range R_Capacity = 0..Capacity
range R_Workload = 0..Workload
set Global_Alphabet = {get_1,put_1,get_2,put_2,get_3,put_3,get_4,put_4,get_5,put_5,return_1, return_2, return_3, return_4, return_5, reject,accept}
set Controllable_Alphabet = {get_1,get_2,get_3,get_4,get_5}

Machine_0 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_1   -> Working[wl+1] |
     when (wl > 0)        put_2 -> Working[wl-1] ).
Machine_1 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_1   -> Working[wl+1] |
     when (wl > 0)        put_2 -> Working[wl-1] ).
Machine_2 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_2   -> Working[wl+1] |
     when (wl > 0)        put_3 -> Working[wl-1] ).     
Machine_3 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_3   -> Working[wl+1] |
     when (wl > 0)        put_4 -> Working[wl-1] ).     
Machine_4 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_4   -> Working[wl+1] |
     when (wl > 0)        put_5 -> Working[wl-1] ).     

TU = Idle,
  Idle    = (get_5 -> Testing | return_2 -> Idle | return_3 -> Idle| return_4 -> Idle | return_5 -> Idle),
  Testing = (return_1 -> reject -> Idle |
             accept -> Idle | return_2 -> Testing | return_3 -> Testing| return_4 -> Testing | return_5 -> Testing).



Buffer_1 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_1    -> Operative[c-1] |
    when (c == 0)        get_1    -> ERROR          |
    when (c < Capacity)  put_1    -> Operative[c+1] |
    when (c == Capacity) put_1    -> ERROR          |
    when (c < Capacity)  return_1 -> Operative[c+1] |
    when (c == Capacity) return_1 -> ERROR          ).
Buffer_2 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_2    -> Operative[c-1] |
    when (c == 0)        get_2    -> ERROR          |
    when (c < Capacity)  put_2    -> Operative[c+1] |
    when (c == Capacity) put_2    -> ERROR          |
    when (c < Capacity)  return_2 -> Operative[c+1] |
    when (c == Capacity) return_2 -> ERROR          ).
Buffer_3 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_3    -> Operative[c-1] |
    when (c == 0)        get_3    -> ERROR          |
    when (c < Capacity)  put_3    -> Operative[c+1] |
    when (c == Capacity) put_3    -> ERROR          |
    when (c < Capacity)  return_3 -> Operative[c+1] |
    when (c == Capacity) return_3 -> ERROR          ).    
Buffer_4 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_4    -> Operative[c-1] |
    when (c == 0)        get_4    -> ERROR          |
    when (c < Capacity)  put_4    -> Operative[c+1] |
    when (c == Capacity) put_4    -> ERROR          |
    when (c < Capacity)  return_4 -> Operative[c+1] |
    when (c == Capacity) return_4 -> ERROR          ).    
Buffer_5 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_5    -> Operative[c-1] |
    when (c == 0)        get_5    -> ERROR          |
    when (c < Capacity)  put_5    -> Operative[c+1] |
    when (c == Capacity) put_5    -> ERROR          |
    when (c < Capacity)  return_5 -> Operative[c+1] |
    when (c == Capacity) return_5 -> ERROR          ).    
/*****************************************************************************/

||Plant = (Machine_0 || Machine_1 || Machine_2 || Machine_3 || Machine_4 || Buffer_1 || Buffer_2 || Buffer_3 || Buffer_4 || Buffer_5 || TU).

||TEST = (Machine_4 || Buffer_5 || TU).

Plant >>_m "/tmp/TL_5_3.met".
//Plant >> "/tmp/TL_6_6_plant.rep".
Machine_4 >> "/tmp/TL_5_3_m_4.rep".
Buffer_5 >> "/tmp/TL_5_3_b_5.rep".
TU >> "/tmp/TL_5_3_tu.rep".
TEST >> "/tmp/TL_5_3_test.rep".


/*
controllerSpec Goal = {
  controllable = {get[0..Machines]}
  marking = {accept,reject}
  nonblocking
}

controller ||MonolithicController = Plant~{Goal}.

heuristic ||DirectedController = Plant~{Goal}.
*/
