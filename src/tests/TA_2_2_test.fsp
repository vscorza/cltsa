/******************************************************************************

A travel agency sells vacation packages on-line by orchestrating existing
third-party web-services for different amenities (e.g. car rental, flight
purchase, hotel booking, etc). We want to synthesize an orchestrator based on
the requirements for the provision of vacation packages and the protocol
specification of the web-services.

The protocols for the services may vary, one variant is the number of steps
required for querying availability; in some cases the process requires a
multiple steps (e.g. querying for flight destination and dates, and if
successful following with a selection for class). Another variant is that some
services may require a reservation step which guarantees a purchase order for
a short period, while others do not, and hence the purchase may fail (e.g. on
low availability reservation may be disabled in order to maximize concurrency
between clients. As a result a race condition between two purchase orders may
arise, and therefore one order will fail).

The example scales in the following dimensions:

1- Amenities: The number of amenities included in the package.
2- Steps: The maximum number of steps requierd to query a service.

******************************************************************************/

const N = 2
const K = 2

const Amenities = N
const Steps = K

range R_Amenity   = 0..(Amenities-1)
range R_Step  = 0..(Steps-1)
range R_Bool = 0..1

/*****************************************************************************/
set Global_Alphabet = {idle,select[r:R_Amenity],query[r:R_Amenity],available[r:R_Amenity],unavailable[r:R_Amenity], steps[r:R_Amenity][s:R_Step],
	query_succ[r:R_Amenity],query_fail[r:R_Amenity],commited[r:R_Amenity],uncommited[r:R_Amenity],
	cancel[r:R_Amenity],purchase[r:R_Amenity],purchase_succ[r:R_Amenity],purchase_fail[r:R_Amenity], agency_request, agency_succ, agency_fail}
set Controllable_Alphabet = {cancel[r:R_Amenity],purchase[r:R_Amenity], agency_succ, agency_fail}

Agency = (agency_request -> Processing),
  Processing = (
    {agency_fail,agency_succ} -> Agency |
    query[r:R_Amenity] -> Processing ).


Service[s_id:R_Amenity] = ({agency_succ,agency_fail} -> Service[s_id]
	|  query[s_id] -> Queried),
Queried = (unavailable[s_id] -> query_fail[s_id] -> Service[s_id]
	| available[s_id] -> steps[s_id][s:R_Step] -> query_succ[s_id] -> Selection[s]),
Selection[s:R_Step] =(when(s > 0)select[s_id] -> Selection[s-1]
	|when(s == 0)select[s_id] -> Booking),
Booking  = (when(s_id==(Amenities-1))     commited[s_id]   -> Reserve
	|when(s_id!=(Amenities-1)) query[s_id+1] -> Reserve
	|when(s_id==(Amenities-1)) uncommited[s_id] -> Direct
	|when(s_id !=(Amenities-1)) query[s_id+1] -> Direct),
Reserve  = ({agency_succ,agency_fail} -> Service[s_id]
	|cancel[s_id]   -> Service[s_id]
	|purchase[s_id] -> purchase_succ[s_id] -> Service[s_id] ),
Direct  = (	{agency_succ,agency_fail} -> Service[s_id]
	|cancel[s_id]   -> Service[s_id]
	|purchase[s_id] -> {purchase_succ[s_id],purchase_fail[s_id]} -> Service[s_id]).


ServiceMonitor[s_id:R_Amenity] = (query[s_id]  -> InQuery        
	|agency_fail -> ServiceMonitor[s_id]   ),
InQuery = (query_succ[s_id] -> QuerySucces
	|query_fail[s_id] -> QueryFail    
	|agency_fail -> ServiceMonitor[s_id]   ),
QuerySucces = (purchase_succ[s_id] -> Success 
	|purchase_fail[s_id] -> QueryFail
	|cancel[s_id]        -> QueryFail
	|agency_fail -> ServiceMonitor[s_id]  ),
QueryFail = (agency_fail -> ServiceMonitor[s_id]   ),
Success = (agency_succ -> ServiceMonitor[s_id]   |    agency_fail -> ServiceMonitor[s_id]   ).
    
AgencyMonitor = Disallow[0],
Disallow[n:R_Bool] = (agency_succ -> Disallow[0]
	|query_fail[r:R_Amenity] -> Allow
	|when(n==0)uncommited[r:R_Amenity] -> Disallow[1] 
	|when(n==1)uncommited[r:R_Amenity] -> Allow
	|when(n==1) purchase_fail[r:R_Amenity] -> Allow ),
Allow = (	{agency_fail,agency_succ} -> Disallow[0]
	|{query_fail[r:R_Amenity],uncommited[r:R_Amenity],purchase_fail[r:R_Amenity]} -> Allow ).

IDLE = (idle->IDLE | query[r:R_Amenity]-> QUERYING),
QUERYING = (query[r:R_Amenity]->QUERYING | {agency_fail, agency_succ} ->IDLE).

/*****************************************************************************/

||Plant = (IDLE || Agency || Service[a:R_Amenity] || ServiceMonitor[b:R_Amenity]).

fluent F_GOAL = <{agency_fail, agency_succ}, query[r:R_Amenity]>
fluent F_Ass = <query[r:R_Amenity], {idle,query_succ[r:R_Amenity],query_fail[r:R_Amenity]}> initially 1

|F| ENV = (Plant).

|gr1| <{F_Ass}><{F_GOAL}>  STRAT = ENV.

STRAT >> "/tmp/t_a_2_2_strat.rep".
STRAT >>_m "/tmp/t_a_2_2_strat.met".

ENV >>_m "/tmp/t_a_2_2_env.met".
ENV >> "/tmp/t_a_2_2_env.rep".


STRAT_P  = S_0,
S_0 = (agency_request-> S_1|idle-> S_2),
S_1 = (idle-> S_3|query_0-> S_4),
S_2 = (agency_request-> S_3|idle-> S_2),
S_3 = (idle-> S_3|query_0-> S_5),
S_4 = (unavailable_0-> S_193|available_0-> S_194),
S_5 = (unavailable_0-> S_6|available_0-> S_7),
S_6 = (query_fail_0-> S_8),
S_7 = (steps_0_0-> S_9|steps_0_1-> S_10),
S_8 = (agency_fail-> S_36),
S_9 = (query_succ_0-> S_11),
S_10 = (query_succ_0-> S_12),
S_11 = (select_0-> S_13),
S_12 = (select_0-> S_11),
S_13 = (query_1-> S_14),
S_14 = (unavailable_1-> S_18|available_1-> S_19),
S_18 = (query_fail_1-> S_20),
S_19 = (steps_1_0-> S_21|steps_1_1-> S_22),
S_20 = (agency_fail-> S_36),
S_21 = (query_succ_1-> S_160),
S_22 = (query_succ_1-> S_161),
S_36 = (agency_request-> S_41|idle-> S_36),
S_41 = (idle-> S_41|query_0-> S_42),
S_42 = (unavailable_0-> S_43|available_0-> S_44),
S_43 = (query_fail_0-> S_45),
S_44 = (steps_0_0-> S_46|steps_0_1-> S_47),
S_45 = (agency_fail-> S_36),
S_46 = (query_succ_0-> S_48),
S_47 = (query_succ_0-> S_49),
S_48 = (select_0-> S_50),
S_49 = (select_0-> S_48),
S_50 = (query_1-> S_51),
S_51 = (unavailable_1-> S_55|available_1-> S_56),
S_55 = (query_fail_1-> S_57),
S_56 = (steps_1_0-> S_58|steps_1_1-> S_59),
S_57 = (agency_fail-> S_36),
S_58 = (query_succ_1-> S_102),
S_59 = (query_succ_1-> S_103),
S_102 = (select_1-> S_104),
S_103 = (select_1-> S_102),
S_104 = (commited_1-> S_105|uncommited_1-> S_106),
S_105 = (agency_fail-> S_36),
S_106 = (agency_fail-> S_36),
S_160 = (select_1-> S_162),
S_161 = (select_1-> S_160),
S_162 = (commited_1-> S_163|uncommited_1-> S_164),
S_163 = (agency_fail-> S_36),
S_164 = (agency_fail-> S_36),
S_193 = (query_fail_0-> S_195),
S_194 = (steps_0_0-> S_196|steps_0_1-> S_197),
S_195 = (agency_fail-> S_223),
S_196 = (query_succ_0-> S_198),
S_197 = (query_succ_0-> S_199),
S_198 = (select_0-> S_200),
S_199 = (select_0-> S_198),
S_200 = (query_1-> S_201),
S_201 = (unavailable_1-> S_205|available_1-> S_206),
S_205 = (query_fail_1-> S_207),
S_206 = (steps_1_0-> S_208|steps_1_1-> S_209),
S_207 = (agency_fail-> S_223),
S_208 = (query_succ_1-> S_347),
S_209 = (query_succ_1-> S_348),
S_223 = (agency_request-> S_228|idle-> S_36),
S_228 = (idle-> S_41|query_0-> S_229),
S_229 = (unavailable_0-> S_230|available_0-> S_231),
S_230 = (query_fail_0-> S_232),
S_231 = (steps_0_0-> S_233|steps_0_1-> S_234),
S_232 = (agency_fail-> S_223),
S_233 = (query_succ_0-> S_235),
S_234 = (query_succ_0-> S_236),
S_235 = (select_0-> S_237),
S_236 = (select_0-> S_235),
S_237 = (query_1-> S_238),
S_238 = (unavailable_1-> S_242|available_1-> S_243),
S_242 = (query_fail_1-> S_244),
S_243 = (steps_1_0-> S_245|steps_1_1-> S_246),
S_244 = (agency_fail-> S_223),
S_245 = (query_succ_1-> S_289),
S_246 = (query_succ_1-> S_290),
S_289 = (select_1-> S_291),
S_290 = (select_1-> S_289),
S_291 = (commited_1-> S_292|uncommited_1-> S_293),
S_292 = (agency_fail-> S_223),
S_293 = (agency_fail-> S_223),
S_347 = (select_1-> S_349),
S_348 = (select_1-> S_347),
S_349 = (commited_1-> S_350|uncommited_1-> S_351),
S_350 = (agency_fail-> S_223),
S_351 = (agency_fail-> S_223).

STRAT >> "/tmp/ta_2_2_strat.rep".

equals FATAL_TA_2_2_STRAT(STRAT, STRAT_P).
