// range def.
const LIMIT = 3
range R = 1..LIMIT
range R2 = 2..LIMIT
range R3 = 2..(LIMIT*2)

// alphabets def.
set Global_Alphabet = {back, t, t[i:R], t[i:R][j:R], back[i:R3]}
set Controllable_Alphabet = {back, back[j:R3]}

// automata def.
TEST_1 = (t[i:R]->t[j:R]->S[i+j]),
S[i:R3] = (when (i > 1)back[i]->S[i]).  

TEST_1_P = S_1,
S_1 = (t_1-> S_2|t_2-> S_3|t_3-> S_4),
S_2 = (t_1-> S_5|t_2-> S_6|t_3-> S_7),
S_3 = (t_1-> S_6|t_2-> S_7|t_3-> S_8),
S_4 = (t_1-> S_7|t_2-> S_8|t_3-> S_9),
S_5 = (back_2-> S_5),
S_6 = (back_3-> S_6),
S_7 = (back_4-> S_7),
S_8 = (back_5-> S_8),
S_9 = (back_6-> S_9).

// tests
equals FATAL_Sum_Range(TEST_1, TEST_1_P).
