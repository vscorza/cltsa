//AHB Arbiter 2 maters - Synthesis of AMBA AHB from Formal Specification:A Case Study
set Global_Alphabet = {}
set Controllable_Alphabet = {}

set Global_Signals	= {hReq0, hReq1, hLock0, hLock1, hTrans0, hTrans1, hBurst0, hBurst1, hReady, hGrant0, hGrant1, hMaster0, hMaster1, 
	hMastLock, decide, busReq, granted, a1_0, g2_0, g2_1, g3_0, g3_1, g3_2, g11_0_0, g11_1_0}
set Output_Signals	= {hGrant0, hGrant1, hMaster0, hMaster1, hMastLock, decide, busReq, granted, a1_0, g2_0, g2_1, g3_0, g3_1, g3_2, g11_0_0, g11_1_0}
order 				= {}
/*
	HTRANS1	HTRANS0
	0	0	nonseq
	0	1	seq
	1	0	idle
	HBURST1	HBURST0
	0	0	single
	0	1	incr4
	1	0	incr (undetermined length)
*/
/***********
**** THETA
***********/
//A9 (i)
ltl env theta Init_Buffer_e in AHB	= (!hReq0 && !hReq1 && !hLock0 && !hLock1 && !hTrans0 && hTrans1 && !hBurst0 && !hBurst1 && !hReady).
ltl sys theta Init_Buffer_s in AHB	= (!hGrant0 && !hGrant1 && !hMaster0 && !hMaster1 && !hMastLock && !decide && !busReq && !granted &&
	!a1_0 && !g2_0 && !g2_1 && !g3_0 && !g3_1 && !g3_2 && !g11_0_0 && !g11_1_0).
/***********
**** SYS RHO
***********/
//G1 if hmaster set for i then busreq equals hbusreq_i (i)
ltl sys rho G1_0 in AHB		= [](hMaster0 -> (busReq <-> hReq0)).
ltl sys rho G1_1 in AHB		= [](hMaster1 -> (busReq <-> hReq1)).

/***********
**** ENV RHO
***********/
//A1 release busreq after incr
ltl env rho A1_0_0 in AHB	= []((!a1_0 && (!hMastLock || !(!hBurst0 && hBurst1))) -> X(!a1_0)).
ltl env rho A1_0_1 in AHB	= []((!a1_0 && (hMastLock && (!hBurst0 && hBurst1))) -> X(a1_0)).
ltl env rho A1_1_1 in AHB	= []((a1_0 && busReq) -> X(a1_0)).
ltl env rho A1_1_1 in AHB	= []((a1_0 && !busReq) -> X(!a1_0)).
//A3 if requesting lock also request bus (i)
ltl env rho A3_0 in AHB		= []((!hBusReq0 && !hLock0 && X(hLock0)) -> X(hBusReq0)).
ltl env rho A3_1 in AHB		= []((!hBusReq1 && !hLock1 && X(hLock1)) -> X(hBusReq1)).
//A4 keep trans and burst consistent while not released by slave
ltl env rho A4_trans in AHB	= [](!hReady -> ((hTrans0 <-> X(hTrans0)) && (hTrans1 <-> X(hTrans1)))).
ltl env rho A4_burst in AHB	= [](!hReady -> ((hBurst0 <-> X(hBurst0)) && (hBurst1 <-> X(hBurst1)))).
//A5 htrans should not be followed by seq after idle
ltl env rho A5 in AHB		= []((!hTrans0 && hTrans1) -> X(!(hTrans0 && !hTrans1))).
//A6 update htrans from nonseq to seq after first hready from incr4
ltl env rho A6 in AHB		= []((!hTrans0 && !hTrans1 && hBurst0 && !hBurst1 && hReady) 
	-> X(hTrans0 && !hTrans1)).
//A7 set nonseq trans if granted and hready
ltl env rho A7 in AHB		= []((granted && hReady) -> X(!hTrans0 && !hTrans1)).
//A8 if no busreq then htrans is set to idle (i)
ltl env rho A8 in AHB		= []((!hBusReq0 && !hBusReq1) -> (!hTrans0 && hTrans1)).
/***********
**** FLUENTS
***********/
ltl fluent A1			= (!a1).
ltl fluent A2			= (hReady).
ltl fluent G2			= (!g2_0 && !g2_1).
ltl fluent G3			= (!g3_0 && !g3_1 && !g3_2).
//G11 (i)
ltl_fluent G11_0		= (!g11_0).
ltl_fluent G11_1		= (!g11_1).
/***********
**** SYNTHESIS
***********/
|f| ENV =(AHB).
|gr1| <{A1, A2}><{G2, G3, G11_0, G11_1}> STRAT = ENV.

STRAT >> "/tmp/ahb_2_strat.rep".
