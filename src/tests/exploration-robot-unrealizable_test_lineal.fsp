
//GenBuf example taken from Synthesis of Reactive(1) Designs 2 senders
set Global_Alphabet = {n,s,e,w,load,unload,drop,correct,bCast}
set Controllable_Alphabet = {n,s,e,w}

set Global_Signals	= {Dummy}
order 				= {}
const Min = 1 //this must always be odd
const Max = 4
range Pos = Min..Max
const MaxError	= 3
range ErrorLimit	= 1..MaxError

//Concrete
MAZE = M[Min][Min], 
M[r:Pos][c:Pos] = ( 
				when((r < (Max - 1)) + ((r < Max) * (c < Max))  ) s->M[r+1][c]
				| when((c < (Max - 1)) + ((c < Max) * (r < Max))  ) e->M[r][c+1]
				| when((r > (Min + 1)) + ((r > Min) * (c > Min))) n->M[r-1][c]
				| when((c > (Min +1)) + ((c > Min) * (r > Min))) w->M[r][c-1]
				| when((r == (Max - 1)) * (c == Max) ) s->M_max
				| when((c == (Max - 1)) * (r == Max)) e->M_max
				| when((r == (Min + 1)) * (c == Min)) n->M_min
				| when((c == (Min + 1) )*  (r == Min)) w->M_min
),
M_max = (unload->M[Max][Max]),
M_min = (drop -> M_min | load->M[Min][Min]).

ARM = ({n,s,e,w}->ARM | drop ->KEEP_TRYING | load->JUST_LOADED),
KEEP_TRYING = (drop->KEEP_TRYING | load ->JUST_LOADED),
JUST_LOADED = ({n,s,e,w}->LOADED),
LOADED = ({n,s,e,w}->LOADED | unload->JUST_UNLOADED),
JUST_UNLOADED = ({n,s,e,w}->ARM).

LOCALIZER = L_B[1],
L[e:ErrorLimit]	= (when(e < MaxError) {n,s,w,e,drop,load,unload} -> L_B[e+1]
		| when(e == MaxError) {n,s,w,e,drop,load,unload} -> L_error),
L_B[e:ErrorLimit]	= (bCast -> L[e] | correct -> L[1]),
L_error	= ({n,s,w,e,drop,load,unload} -> L_error).

//||C = (MAZE ||_c ARM).
|f|PLANT = (MAZE ||_c  LOCALIZER).
//||T = (MAZE ||_c LOCALIZER).
||A_ARM_LOCALIZER = (ARM ||_c LOCALIZER).
||A_MAZE_LOCALIZER = (LOCALIZER ||_c MAZE).
||A_MAZE_ARM = (ARM ||_c MAZE).

fluent F_Load = <load, {unload,n,s,e,w,drop,correct,bCast}>
fluent F_Unload = <unload, {load,n,s,e,w,drop,correct,bCast}>
fluent F_Dont_Drop = <load, drop> initially 1
fluent F_Broadcast = <bCast,{unload,load,n,s,e,w,stall,correct}> initially 1
|gr1| <{F_Dont_Drop}><{F_Load, F_Unload, F_Broadcast}> STRAT = PLANT.


A_ARM_LOCALIZER >> "/tmp/exploration_robot_unrealizable_lineal_arm_localizer.rep".
A_MAZE_LOCALIZER >> "/tmp/exploration_robot_unrealizable_lineal_maze_localizer.rep".
A_MAZE_ARM >> "/tmp/exploration_robot_unrealizable_lineal_maze_arm.rep".
MAZE >> "/tmp/exploration_robot_unrealizable_lineal_maze.rep".
ARM >> "/tmp/exploration_robot_unrealizable_lineal_arm.rep".
LOCALIZER >> "/tmp/exploration_robot_unrealizable_localizer.rep".
PLANT >> "/tmp/exploration_robot_unrealizable_lineal_plant.rep".
STRAT >> "/tmp/exploration_robot_unrealizable_lineal_strat.rep".

STRAT_p = S_0,
S_0 = (bCast-> S_1),
S_1 = (s-> S_3|e-> S_4),
S_3 = (correct-> S_38),
S_4 = (correct-> S_6),
S_6 = (s-> S_7|e-> S_8|w-> S_9),
S_7 = (bCast-> S_113),
S_8 = (bCast-> S_112),
S_9 = (bCast-> S_10),
S_10 = (load-> S_108),
S_15 = (bCast-> S_37),
S_16 = (bCast-> S_17),
S_17 = (s-> S_18|e-> S_19|w-> S_20),
S_18 = (s-> S_27|e-> S_32|n-> S_24|w-> S_23),
S_19 = (s-> S_32|e-> S_34|w-> S_24),
S_20 = (load-> S_22),
S_22 = (s-> S_23|e-> S_24),
S_23 = (s-> S_25|e-> S_18|n-> S_20),
S_24 = (s-> S_18|e-> S_19|w-> S_20),
S_25 = (s-> S_26|e-> S_27|n-> S_23),
S_26 = (e-> S_28|n-> S_25),
S_27 = (s-> S_28|e-> S_29|n-> S_18|w-> S_25),
S_28 = (e-> S_30|n-> S_27|w-> S_26),
S_29 = (s-> S_30|e-> S_31|n-> S_32|w-> S_27),
S_30 = (n-> S_29|w-> S_28|e-> S_35),
S_31 = (n-> S_33|w-> S_29|s-> S_35),
S_32 = (s-> S_29|e-> S_33|n-> S_19|w-> S_18),
S_33 = (s-> S_31|n-> S_34|w-> S_32),
S_34 = (s-> S_33|w-> S_19),
S_35 = (unload-> S_36),
S_36 = (n-> S_31|w-> S_30),
S_37 = (s-> S_25|e-> S_18|n-> S_20),
S_38 = (s-> S_39|e-> S_7|n-> S_9),
S_39 = (bCast-> S_40),
S_40 = (s-> S_99|e-> S_96|n-> S_15),
S_67 = (bCast-> S_70),
S_68 = (bCast-> S_69),
S_69 = (s-> S_29|e-> S_33|n-> S_19|w-> S_18),
S_70 = (s-> S_33|w-> S_19),
S_96 = (bCast-> S_97),
S_97 = (s-> S_28|e-> S_29|n-> S_18|w-> S_25),
S_99 = (bCast-> S_100),
S_100 = (e-> S_28|n-> S_25),
S_108 = (bCast-> S_109),
S_109 = (s-> S_23|e-> S_24),
S_112 = (s-> S_68|e-> S_67|w-> S_16),
S_113 = (s-> S_96|e-> S_68|n-> S_16|w-> S_15).
equals FATAL_ROBOT_UNREALIZABLE(STRAT, STRAT_p).
