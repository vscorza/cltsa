//GenBuf example taken from Synthesis of Reactive(1) Designs 2 senders
set Global_Alphabet = {}
set Controllable_Alphabet = {}

set Global_Signals	= {sREQ0, sREQ1, bACK0, bACK1, bREQ0, bREQ1, rACK0, rACK1, enq, deq, full, empty, slc0, s0}
set Output_Signals	= {bACK0, bACK1, bREQ0, bREQ1, enq, deq, slc0, s0}
//order			= {s0 < sREQ0 < sREQ1 < sREQ_2 < sREQ_3 < rACK0 < rACK1 < full < empty < bACK0 < bACK1 < bACK_2 < bACK_3 < bREQ0 < bREQ1 < enq < deq < slc0}
order 				= {}
/***********
**** THETA
***********/
ltl env theta Init_Buffer_e in GENBUF	= (!sREQ0 && !sREQ1 && !rACK0 && !rACK1 && !full && empty).
ltl sys theta Init_Buffer_s in GENBUF	= (!bACK0 && !bACK1 && !bREQ0 && !bREQ1 && !enq && !deq && !slc0 && !s0).
/***********
**** SYS RHO
***********/
//bACK only if sREQ
ltl sys rho G_3_sndr0 in GENBUF		= []((!bACK0 && X(bACK0)) -> sREQ0).
ltl sys rho G_3_sndr1 in GENBUF		= []((!bACK1 && X(bACK1)) -> sREQ1).
//keep bACK up if sREQ still going
ltl sys rho G_4_sndr0 in GENBUF		= []((bACK0 && sREQ0) -> X(bACK0)).
ltl sys rho G_4_sndr1 in GENBUF		= []((bACK1 && sREQ1) -> X(bACK1)).
//mutex bACK
ltl sys rho G_5 in GENBUF			= []((!(bACK0 && bACK1))).
ltl sys rho G_5_X in GENBUF			= [](X((!(bACK0 && bACK1)))).
//mutex bREQ
ltl sys rho G_5_b1_rcvr0 in GENBUF		= [](!(bREQ0 && bREQ1)).
ltl sys rho G_5_b1_rcvr0 in GENBUF		= [](X(!(bREQ0 && bREQ1))).
//keep bREQ if not yet ack
ltl sys rho G_61_rcvr0 in GENBUF		= []((bREQ0 && !rACK0) -> X(bREQ0)).
ltl sys rho G_61_rcvr1 in GENBUF		= []((bREQ1 && !rACK1) -> X(bREQ1)).
//serving receivers in round robin fashion 
ltl sys rho G_701 in GENBUF				= []((!s0 && bREQ0) -> X(s0)).//advance state
ltl sys rho G_70_2 in GENBUF				= []((!s0 && !bREQ0) -> X(!s0)).//keep state
//ltl sys rho G_70_3 in GENBUF				= []((!s0) -> (!bREQ1)).//restrict
//ltl sys rho G_70_4 in GENBUF				= [](X((!s0) -> (!bREQ1))).//restrict X
ltl sys rho G_711 in GENBUF				= []((s0 && bREQ1) -> X(!s0)).
ltl sys rho G_71_2 in GENBUF				= []((s0 && !bREQ1) -> X(s0)).
//ltl sys rho G_71_3 in GENBUF				= []((s0) -> (!bREQ0)).
//ltl sys rho G_71_4 in GENBUF				= [](X((s0) -> (!bREQ0))).
//lower bREQ when rACK received
ltl sys rho G_8_rcvr0 in GENBUF		= [](rACK0 -> X(!bREQ0)).
ltl sys rho G_8_rcvr1 in GENBUF		= [](rACK1 -> X(!bREQ1)).
//bACK raises iff enq
ltl sys rho G_91 in GENBUF			= [](X(enq) <-> ((!bACK0 && X(bACK0)) || (!bACK1 && X(bACK1)) )).
//update slc accordingly
ltl sys rho G_9_2 in GENBUF			= [](((!bACK0 && X(bACK0)) -> (!X(slc0))) && ((!bACK1 && X(bACK1)) -> (X(slc0)))).
//only deq if rACK'd
ltl sys rho G10 in GENBUF			= [](X(deq) ->	((!X(rACK0) && rACK0)	||	(!X(rACK1) && rACK1))).
//restrict eng/deq operations
ltl sys rho G111 in GENBUF			= []((full && !deq)-> !enq).
ltl sys rho G111_X in GENBUF			= [](X((full && !deq)-> !enq)).
ltl sys rho G11_2 in GENBUF			= [](empty-> !deq).
ltl sys rho G11_2_X in GENBUF			= [](X(empty-> !deq)).

//if sREQ and not full then should ENQ
ltl sys rho G13 in GENBUF			= []((!full && (sREQ0 || sREQ1)) -> (enq || X(enq))).

/***********
**** ENV RHO
***********/

//keep sREQ if not yet ACK'd
ltl env rho A11_sndr0 in GENBUF		= []((sREQ0 && !bACK0) -> X(sREQ0)).
ltl env rho A11_sndr1 in GENBUF		= []((sREQ1 && !bACK1) -> X(sREQ1)).
//lower sREQ once ACK'd
ltl env rho A1_2_sndr0 in GENBUF		= [](bACK0 -> X(!sREQ0)).
ltl env rho A1_2_sndr1 in GENBUF		= [](bACK1 -> X(!sREQ1)).
//lower rACK if no bREQ
ltl env rho A_2_2_sndr0 in GENBUF		= []((!bREQ0) -> X(!rACK0)).
ltl env rho A_2_2_sndr1 in GENBUF		= []((!bREQ1) -> X(!rACK1)).
//keep rACK if still REQ's
ltl env rho A_3_rcvr0 in GENBUF		= []((bREQ0 && rACK0) -> X(rACK0)).
ltl env rho A_3_rcvr1 in GENBUF		= []((bREQ1 && rACK1) -> X(rACK1)).
//rACK if REQ'd
ltl env rho A_4_rcvr0 in GENBUF		= [](X(rACK0) -> bREQ0).
ltl env rho A_4_rcvr1 in GENBUF		= [](X(rACK1) -> bREQ1).
//keep empty / full fixed if deq == enq
ltl env rho A_51 in GENBUF			= []((deq <-> enq) -> (empty <-> X(empty))).
ltl env rho A_5_2 in GENBUF			= []((deq <-> enq) -> (full <-> X(full))).
ltl env rho A_5_3 in GENBUF			= []((enq && !deq) -> !X(empty)).
ltl env rho A_5_4 in GENBUF			= []((deq && !enq) -> !X(full)).

/***********
**** FLUENTS
***********/
//G12 was turned into a fluent
fluent F_Goal12 = <{deq.on,empty.on}, empty.off> initially 1
fluent A_2_sndr0 = <rACK0.on, bREQ0.on> initially 1
fluent A_2_sndr1 = <rACK1.on, bREQ1.on> initially 1

ltl fluent G1_2_sndr0		= (sREQ0 <-> bACK0).
ltl fluent G1_2_sndr1		= (sREQ1 <-> bACK1).
/***********
**** SYNTHESIS
***********/
|f| ENV =(GENBUF).
|gr1| <{A_2_sndr0, A_2_sndr1}><{F_Goal12, G1_2_sndr0, G1_2_sndr1}> STRAT = ENV.
