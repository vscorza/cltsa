//AHB Arbiter 2 masters - Scheduler - Synthesis of AMBA AHB from Formal Specification:A Case Study
//Formulae marked with (i) means that part of it is parameterized
set Global_Alphabet = {}
set Controllable_Alphabet = {}

set Global_Signals	= {hReq0, hReq1, decide, sel0}
set Output_Signals	= {sel0}
order 				= {}

/***********
**** THETA
***********/
//A9 (i)
ltl env theta Init_Buffer_e in AHB	= (!hReq0 && !hReq1 && decide).
ltl sys theta Init_Buffer_s in AHB	= (!sel0).
/***********
**** SYS RHO
***********/
ltl sys rho G8_lock in AHB	= []((!hReady || !granted) -> ((hLock0 <-> X(hLock0)) && (hLock1 <-> X(hLock1)))).
//G9 if not deciding keep hgrant fixed (i)
ltl sys rho G9 in AHB		= [](!decide -> ((hGrant0 <-> X(hGrant0)) && (hGrant1 <-> X(hGrant1)))).
//G10 do not grant before hbusreq / if no busreq grant 0 (i)
ltl sys rho G10_1_00_00 in AHB	= []((!g10_1_0 && !g10_1_1 && hGrant1) -> X(!g10_1_0 && !g10_1_1)).
ltl sys rho G10_1_00_01 in AHB	= []((!g10_1_0 && !g10_1_1 && !hGrant1) -> X(g10_1_0 && !g10_1_1)).
ltl sys rho G10_1_01_01 in AHB	= []((g10_1_0 && !g10_1_1 && !hGrant1 && !hReq1) -> X(g10_1_0 && !g10_1_1)).
ltl sys rho G10_1_01_00 in AHB	= []((g10_1_0 && !g10_1_1 && !hGrant1 && hReq1) -> X(!g10_1_0 && !g10_1_1)).
ltl sys rho G10_1_01_10 in AHB	= []((g10_1_0 && !g10_1_1 && hGrant1) -> X(!g10_1_0 && g10_1_1)).
ltl sys rho G10_1_10_10 in AHB	= []((!g10_1_0 && g10_1_1) -> X(!g10_1_0 && g10_1_1)).
ltl sys rho G10_grant0 in AHB	= []((decide && !hReq0 && !hReq1) -> X(hGrant0)).
//G11 if hReq_i then evt. hReq_i is lowered or hMaster_i is selected (i)
ltl sys rho G11_0_0_0 in AHB	= []((!g11_0_0 && !hReq0) -> X(!g11_0_0)).
ltl sys rho G11_0_0_1 in AHB	= []((!g11_0_0 && hReq0) -> X(g11_0_0)).
ltl sys rho G11_0_1_1 in AHB	= []((g11_0_0 && hReq0 && !hMaster0) -> X(g11_0_0)).
ltl sys rho G11_0_1_0 in AHB	= []((g11_0_0 && (!hReq0 || hMaster0)) -> X(!g11_0_0)).
ltl sys rho G11_1_0_0 in AHB	= []((!g11_1_0 && !hReq1) -> X(!g11_1_0)).
ltl sys rho G11_1_0_1 in AHB	= []((!g11_1_0 && hReq1) -> X(g11_1_0)).
ltl sys rho G11_1_1_1 in AHB	= []((g11_1_0 && hReq1 && !hMaster1) -> X(g11_1_0)).
ltl sys rho G11_1_1_0 in AHB	= []((g11_1_0 && (!hReq1 || hMaster1)) -> X(!g11_1_0)).

/***********
**** ENV RHO
***********/
//A1 release busreq after incr
ltl env rho A1_0_0 in AHB	= []((!a1_0 && (!hMastLock || !(!hBurst0 && hBurst1))) -> X(!a1_0)).
ltl env rho A1_0_1 in AHB	= []((!a1_0 && (hMastLock && (!hBurst0 && hBurst1))) -> X(a1_0)).
ltl env rho A1_1_1 in AHB	= []((a1_0 && busReq) -> X(a1_0)).
ltl env rho A1_1_1 in AHB	= []((a1_0 && !busReq) -> X(!a1_0)).
//A3 if requesting lock also request bus (i)
ltl env rho A3_0 in AHB		= []((!hReq0 && !hLock0 && X(hLock0)) -> X(hReq0)).
ltl env rho A3_1 in AHB		= []((!hReq1 && !hLock1 && X(hLock1)) -> X(hReq1)).
//A4 keep trans and burst consistent while not released by slave
ltl env rho A4_trans in AHB	= [](!hReady -> ((hTrans0 <-> X(hTrans0)) && (hTrans1 <-> X(hTrans1)))).
ltl env rho A4_burst in AHB	= [](!hReady -> ((hBurst0 <-> X(hBurst0)) && (hBurst1 <-> X(hBurst1)))).
//A5 htrans should not be followed by seq after idle
ltl env rho A5 in AHB		= []((!hTrans0 && hTrans1) -> X(!(hTrans0 && !hTrans1))).
//A6 update htrans from nonseq to seq after first hready from incr4
ltl env rho A6 in AHB		= []((!hTrans0 && !hTrans1 && hBurst0 && !hBurst1 && hReady) 
	-> X(hTrans0 && !hTrans1)).
//A7 set nonseq trans if granted and hready
ltl env rho A7 in AHB		= []((granted && hReady) -> X(!hTrans0 && !hTrans1)).
//A8 if no busreq then htrans is set to idle (i)
ltl env rho A8 in AHB		= []((!hReq0 && !hReq1) -> (!hTrans0 && hTrans1)).
/***********
**** FLUENTS
***********/
ltl fluent A1			= (!a1_0).
ltl fluent A2			= (hReady).
ltl fluent G2			= (!g2_0 && !g2_1).
ltl fluent G3			= (!g3_0 && !g3_1 && !g3_2).
//G11 (i)
ltl fluent G10_1		= (!g10_1_0 && !g10_1_1).
ltl fluent G11_0		= (!g11_0_0).
ltl fluent G11_1		= (!g11_1_0).
/***********
**** SYNTHESIS
***********/
|f| ENV =(AHB).
|gr1| <{A1, A2}><{G2, G3, G10_1, G11_0, G11_1}> STRAT = ENV.

STRAT >> "/tmp/ahb_2_strat.rep".
