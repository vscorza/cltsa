//GenBuf example taken from Synthesis of Reactive(1) Designs 2 senders
set Global_Alphabet = {n,s,e,w,load,unload,stall,releaseNorth, releaseSouth,correct,bCast}
set Controllable_Alphabet = {n,s,e,w,load,unload}

set Global_Signals	= {Dummy}
order 				= {}
const Min = 1 //this must always be odd
const Max = 150
range Pos = Min..Max
const MaxError	= 6
range ErrorLimit	= 1..MaxError

//Concrete
MAZE = M[1][1], 
M[r:Pos][c:Pos] = ( 
				when(r > Min) n->M[r-1][c] 
				| when(r < Max) s->M[r+1][c]
				| when(c > Min) w->M[r][c-1]
				| when(c < Max) e->M[r][c+1]
				| when((r == Max) * (c == Max)) load->M[r][c]
				| when((r == Min) * (c == Min)) unload->M[r][c]
				| when((r == ((Max - Min)/2))) stall -> M[r][c]
				| when((r > Min) * (r == ((Max - Min)/2))) <n, releaseNorth>->M[r-1][c] 
				| when((r < Max) * (r == ((Max - Min)/2))) <s, releaseSouth>->M[r+1][c]		
).

ARM = (load->unload->ARM).

LOCALIZER = L_B[1],
L[e:ErrorLimit]	= (when(e < MaxError) {n,s,w,e,<n,releaseNorth>,<s,releaseSouth>,load,unload} -> L_B[e+1]
		| when(e == MaxError) {n,s,w,e,<n,releaseNorth>,<s,releaseSouth>,load,unload} -> L_error),
L_B[e:ErrorLimit]	= (bCast -> L[e] | correct -> L[1]),
L_error	= ({n,s,w,e,<n,releaseNorth>,<s,releaseSouth>,load,unload} -> L_error).

||C = (MAZE ||_c ARM).

|f|PLANT = (MAZE || ARM || LOCALIZER).

fluent F_Load = <load, {unload,n,s,e,w,stall,releaseNorth, releaseSouth,correct,bCast}>
fluent F_Unload = <unload, {load,n,s,e,w,stall,releaseNorth, releaseSouth,correct,bCast}>
fluent F_ReleaseNorth = <releaseNorth,{unload,load,n,s,e,w,stall,releaseSouth,correct,bCast}> initially 1
fluent F_ReleaseSouth = <releaseSouth,{unload,load,n,s,e,w,stall,releaseNorth,correct,bCast}> initially 1
fluent F_Broadcast = <bCast,{unload,load,n,s,e,w,stall,releaseSouth,releaseNorth,correct}> initially 1
ltl fluent A_Dummy = (true || !true).
|gr1| <{A_Dummy}><{F_Load, F_Unload, F_Broadcast}> STRAT = PLANT.

LOCALIZER >> "/tmp/exploration_robot_150_localizer.rep".
STRAT >> "/tmp/exploration_robot_150_diag.rep".
