//ColorSortLTLUnrealizable1_790_ColorSort_unrealizable
/*
color2	color1	color0	value
0	0	0	green
0	0	1	black
0	1	0	red
0	1	1	blue
1	0	0	yellow
1	0	1	white
ack 0 sleep	1 move
botmot1	botmot0	value
0	0	stop
0	1	seek
1	0	return
motspeed1	motspeed0	value
0	0	level1
0	1	level2
1	0	level3
*/

set Global_Alphabet = {}
set Controllable_Alphabet = {}
set Global_Signals	= {color2, color1, color0, detect2, detect1, detect0, ack_ver, ack_hor, ack_bot, starting_pos, speedButton, verMot, horMot, botMot1, botMot0, motSpeed1, motSpeed0, spec_color2, spec_color1, spec_color0, spec_dropping, spec_valid,spec_waiting_ack_ver_mot,spec_waiting_ack_hor_mot, respondedA, respondedB, respondedC}
set Output_Signals	= {verMot, horMot, botMot1, botMot0, motSpeed1, motSpeed0, spec_color2, spec_color1, spec_color0, spec_dropping, spec_valid,spec_waiting_ack_ver_mot,spec_waiting_ack_hor_mot, respondedA, respondedB, respondedC}
order	= {}
ltl sys theta Init_Buffer_s in COLOR =(!color2 && !color1 && !color0 && !detect2 && !detect1 && !detect0 && !ack_ver && !ack_hor && !ack_bot && !starting_pos && !speedButton && !respondedA && !respondedB && !respondedC).
ltl sys theta Init_Buffer_e in COLOR =(!verMot && !horMot && !botMot1 && !botMot0 && !motSpeed1 && !motSpeed0 && !spec_color2 && !spec_color1 && !spec_color0 && !spec_dropping && !spec_valid && !spec_waiting_ack_ver_mot && !spec_waiting_ack_hor_mot).

/*
pattern respondsTo(trigger, response) {
  var boolean responded.
  responded.
  G (X(responded) iff (response or responded and !trigger)).
  GF (responded).
}
*/
ltl sys rho G_XX in COLOR = [](verMot -> ((!botMot0 && !botMot1) && !horMot)).
ltl sys rho G_XX in COLOR = [](horMot -> ((!botMot0 && !botMot1) && !verMot)).
ltl sys rho G_XX in COLOR = [](!(!botMot0 && !botMot1) -> (!verMot && !horMot)).
ltl sys rho G_XX in COLOR = [](ack_ver || ack_hor ->  (!verMot && !horMot && !botMot1 && !botMot0)).
ltl sys rho G_XX in COLOR = [](!verMot <-> ((spec_color0 <-> X(spec_color0)) && (spec_color1 <-> X(spec_color1)) && (spec_color2 <-> X(spec_color2)))).
ltl sys rho G_XX in COLOR = []((spec_dropping <-> X(spec_dropping)) <-> !verMot && !horMot).
ltl sys rho G_XX in COLOR = [](!spec_dropping && !starting_pos && (!ack_ver && !ack_hor) <-> (!botMot0 && botMot1)).
ltl sys rho G_XX in COLOR = [](!spec_dropping && starting_pos && (color0 && !color1 && !color2) ->  (!verMot && !horMot && !botMot1 && !botMot0)).
ltl sys rho G_XX in COLOR = []((color0 && !color1 && !color2) || spec_dropping -> !verMot).
ltl sys rho G_XX in COLOR = [](!spec_dropping && starting_pos && (!ack_ver && !ack_hor && !ack_bot) && !(color0 && !color1 && !color2) <-> verMot && ((color0 <-> X(spec_color0)) && (color1 <-> X(spec_color1)) && (color2 <-> X(spec_color2)))).
ltl sys rho G_XX in COLOR = [](spec_dropping && !((detect0 <-> spec_color0) &&(detect1 <-> spec_color1) &&(detect2 <-> spec_color2)) && (!ack_ver && !ack_hor) <-> (botMot0 && !botMot1)).
ltl sys rho G_XX in COLOR = [](spec_dropping && ((detect0 <-> spec_color0) &&(detect1 <-> spec_color1) &&(detect2 <-> spec_color2)) && (!ack_ver && !ack_hor) <-> horMot).
ltl sys rho G_XX in COLOR = [](!X(speedButton) && speedButton <-> X(spec_valid)).
ltl sys rho G_XX in COLOR = [](spec_valid && (!motSpeed0 && !motSpeed1) -> X((motSpeed0 && !motSpeed1))).
ltl sys rho G_XX in COLOR = [](spec_valid && (motSpeed0 && !motSpeed1) -> X((!motSpeed0 && motSpeed1))).
ltl sys rho G_XX in COLOR = [](spec_valid && (!motSpeed0 && motSpeed1) -> X((!motSpeed0 && !motSpeed1))).
ltl sys rho G_XX in COLOR = [](!spec_valid -> ((motSpeed0 <-> X(motSpeed0)) && (motSpeed1 <-> X(motSpeed1)))).
ltl sys rho A_XX in COLOR = [](!spec_waiting_ack_ver_mot && !verMot -> X(!spec_waiting_ack_ver_mot)).
ltl sys rho G_XX in COLOR = [](!spec_waiting_ack_ver_mot && verMot -> X(spec_waiting_ack_ver_mot)).
ltl sys rho G_XX in COLOR = [](spec_waiting_ack_ver_mot && !ack_ver -> X(!spec_waiting_ack_ver_mot)).
ltl sys rho G_XX in COLOR = [](spec_waiting_ack_ver_mot && ack_ver -> X(spec_waiting_ack_ver_mot)).
ltl env rho A_XX in COLOR = [](!spec_waiting_ack_ver_mot -> !ack_ver).

ltl sys rho A_XX in COLOR = [](!spec_waiting_ack_hor_mot && !horMot -> X(!spec_waiting_ack_hor_mot)).
ltl sys rho G_XX in COLOR = [](!spec_waiting_ack_hor_mot && horMot -> X(spec_waiting_ack_hor_mot)).
ltl sys rho G_XX in COLOR = [](spec_waiting_ack_hor_mot && !ack_hor -> X(!spec_waiting_ack_hor_mot)).
ltl sys rho G_XX in COLOR = [](spec_waiting_ack_hor_mot && ack_hor -> X(spec_waiting_ack_hor_mot)).
ltl env rho A_XX in COLOR = [](!spec_waiting_ack_hor_mot -> !ack_hor).

ltl env rho A_XX in COLOR = [] (X(respondedA) <-> (!ack_ver || (respondedA && !spec_waiting_ack_ver_mot))).
ltl env rho A_XX in COLOR = [] (X(respondedB) <-> (!ack_hor || (respondedB && !spec_waiting_ack_hor_mot))).
ltl sys rho A_XX in COLOR = [] (X(respondedC) <-> ((horMot && ((detect0 <-> spec_color0) &&(detect1 <-> spec_color1) &&(detect2 <-> spec_color2))) || (respondedC && !(color0 && !color1 && !color2)))). 

ltl fluent A1 = (!(color0 && !color1 && !color2)).
ltl fluent A2 = (ack_hor).
ltl fluent G1 = (horMot).

ltl fluent GA = (!respondedA).
ltl fluent GB = (!respondedB).
ltl fluent GC = (!respondedC).

|f| ENV =(COLOR).
|gr1| <{A1, A2}><{G1,GA,GB,GC}> STRAT = ENV.
ENV >> "/tmp/color.rep".
STRAT >> "/tmp/color_strat.rep".

