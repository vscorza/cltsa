//lift example taken from Synthesis of Reactive(1) Designs 2 floors
set Global_Alphabet = {}
set Controllable_Alphabet = {}

set Global_Signals	= {b1, b2, f1, f2}
set Output_Signals	= {f1, f2}

ltl env theta Init_Lift_e in GAME_LTL	= (!b1 && !b2).
ltl sys theta Init_Lift_s in GAME_LTL	= (f1 && !f2).
ltl env rho Env_Release_B in GAME_LTL	= [](((b1 && f1)-> X(!b1)) &&((b2 && f2)-> X(!b2))).
ltl env rho Env_Keep_B in GAME_LTL		= [](((b1 && !f1)-> X(b1)) &&((b2 && !f2)-> X(b2))).
ltl sys rho Sys_Mutex in GAME_LTL		= [](!(f1 && f2) && !(X(f1 && f2))).
ltl sys rho Sys_Adj_Floors in GAME_LTL	= []((f1 -> X(f1 || f2)) && (f2 -> X(f1 || f2))).
ltl sys rho Sys_Move_Iff_B in GAME_LTL	= []((f1 && X(f2))->(b1 || b2)).
//ltl sys rho New_s in GAME_LTL	= [](f1 -> X(f1)).


ltl fluent Ass_True = (b2||!b2).
ltl fluent Goal_Back_To_Ground			= (f1 || (b1 || b2)).
ltl fluent Goal_Serve_Request_1			= ((b1->f1)).
ltl fluent Goal_Serve_Request_2			= ((b2->f2)).

|f| ENV =(GAME_LTL).
|gr1| <{Ass_True}><{Goal_Serve_Request_1,Goal_Serve_Request_2,Goal_Back_To_Ground}> STRAT = ENV.

STRAT >>_m "/tmp/lift_controller_2.diag".

ENV >> "/tmp/lift_controller_2.fsp.game.rep".
ENV_SEQ >> "/tmp/lift_controller_2.fsp.game_seq.rep".

ENV >>_m "/tmp/lift_controller_2.fsp.game.diag".
|ti| ENV_INTRLVD in ENV.
|ts| ENV_SEQ in ENV.
ENV_INTRLVD >>_m "/tmp/lift_controller_2.fsp.game_intrlvd.diag".
ENV_SEQ >>_m "/tmp/lift_controller_2.fsp.game_seq.diag".

