//lift example taken from Synthesis of Reactive(1) Designs 2 floors
set Global_Alphabet = {}
set Controllable_Alphabet = {}

set Global_Signals	= {b1, b2, f1, f2}
set Output_Signals	= {f1, f2}

ltl env theta Init_Lift_e in GAME_LTL	= (!b1 && !b2).
ltl sys theta Init_Lift_s in GAME_LTL	= (f1 && !f2).
ltl env rho Env_Release_B in GAME_LTL	= [](((b1 && f1)-> X(!b1)) &&((b2 && f2)-> X(!b2))).
ltl env rho Env_Keep_B in GAME_LTL		= [](((b1 && !f1)-> X(b1)) &&((b2 && !f2)-> X(b2))).
ltl sys rho Sys_Mutex in GAME_LTL		= [](!(f1 && f2) && !(X(f1 && f2))).
ltl sys rho Sys_Adj_Floors in GAME_LTL	= []((f1 -> X(f1 || f2)) && (f2 -> X(f1 || f2))).
ltl sys rho Sys_Move_Iff_B in GAME_LTL	= []((f1 && X(f2))->(b1 || b2)).


ltl fluent Ass = (b1 || !b1).
ltl fluent Goal_Back_To_Ground			= (f1 || (b1 || b2)).
ltl fluent Goal_Serve_Request_1			= ((b1->f1)).
ltl fluent Goal_Serve_Request_2			= ((b2->f2)).

|f| ENV =(GAME_LTL).
|gr1| <{Ass}><{Goal_Serve_Request_1,Goal_Serve_Request_2,Goal_Back_To_Ground}> STRAT = ENV.

GAME_FSP = S_0,
S_0 = (f1.on-> S_1),
S_1 = (<>-> S_1|b1.on-> S_6|b2.on-> S_7|<b1.on,b2.on>-> S_8),
S_2 = (<>-> S_2|b1.on-> S_3|b2.on-> S_4|<b1.on,b2.on>-> S_5|<f1.on,f2.off>-> S_1|<b1.on,f1.on,f2.off>-> S_6|<b2.on,f1.on,f2.off>-> S_7|<b1.on,b2.on,f1.on,f2.off>-> S_8),
S_3 = (<>-> S_3|b2.on-> S_5|<f1.on,f2.off>-> S_6|<b2.on,f1.on,f2.off>-> S_8),
S_4 = (b2.off-> S_2|<b1.on,b2.off>-> S_3|<b2.off,f1.on,f2.off>-> S_1|<b1.on,b2.off,f1.on,f2.off>-> S_6),
S_5 = (b2.off-> S_3|<b2.off,f1.on,f2.off>-> S_6),
S_6 = (<b1.off,f1.off,f2.on>-> S_2|<b1.off,b2.on,f1.off,f2.on>-> S_4|b1.off-> S_1|<b1.off,b2.on>-> S_7),
S_7 = (<f1.off,f2.on>-> S_4|<b1.on,f1.off,f2.on>-> S_5|<>-> S_7|b1.on-> S_8),
S_8 = (<b1.off,f1.off,f2.on>-> S_4|b1.off-> S_7).

STRAT_p = S_0,
S_0 = (f1.on-> S_1),
S_1 = (<>-> S_2|b1.on-> S_4|b2.on-> S_6|<b1.on,b2.on>-> S_8),
S_2 = (<>-> S_16|b1.on-> S_17|b2.on-> S_18|<b1.on,b2.on>-> S_19),
S_3 = (<b1.off,f1.off,f2.on>-> S_10|<b1.off,b2.on,f1.off,f2.on>-> S_12),
S_4 = (<b1.off,f1.off,f2.on>-> S_20|<b1.off,b2.on,f1.off,f2.on>-> S_21),
S_5 = (<f1.off,f2.on>-> S_12|b1.on-> S_8),
S_6 = (<f1.off,f2.on>-> S_21|<b1.on,f1.off,f2.on>-> S_23),
S_7 = (<b1.off,f1.off,f2.on>-> S_12),
S_8 = (<b1.off,f1.off,f2.on>-> S_21),
S_10 = (<>-> S_20|b1.on-> S_25|b2.on-> S_21|<b1.on,b2.on>-> S_23),
S_11 = (b2.off-> S_10|<b1.on,b2.off,f1.on,f2.off>-> S_4),
S_12 = (b2.off-> S_20|<b1.on,b2.off>-> S_25),
S_13 = (<f1.on,f2.off>-> S_4|<b2.on,f1.on,f2.off>-> S_8),
S_14 = (<b2.off,f1.on,f2.off>-> S_4),
S_16 = (<>-> S_1|b1.on-> S_3|b2.on-> S_5|<b1.on,b2.on>-> S_7),
S_17 = (b1.off-> S_1|<b1.off,b2.on,f1.off,f2.on>-> S_11),
S_18 = (<f1.off,f2.on>-> S_21|<b1.on,f1.off,f2.on>-> S_23),
S_19 = (<b1.off,f1.off,f2.on>-> S_21),
S_20 = (<f1.on,f2.off>-> S_1|b1.on-> S_13|b2.on-> S_11|<b1.on,b2.on>-> S_14),
S_21 = (<b2.off,f1.on,f2.off>-> S_1|<b1.on,b2.off>-> S_13),
S_23 = (b2.off-> S_13),
S_25 = (<>-> S_13|b2.on-> S_14).

STRAT >> "/tmp/two_lifts_strat.rep".
GAME_LTL >> "/tmp/two_lifts_game_ltl.rep".
GAME_FSP >> "/tmp/two_lifts_game_fsp.rep".
STRAT >> "/tmp/two_lifts_strat.rep".
STRAT_P >> "/tmp/two_lifts_strat_p.rep".
//TESTS
equals FATAL_Game_Lift_2_FSP_VS_LTL(GAME_LTL, GAME_FSP).
equals FATAL_Game_Lift_2_STRAT_VS_STRAT_p(STRAT, STRAT_p).

GAME_LTL >> "/tmp/two_floors_lift_game.rep".
GAME_STRAT >> "/tmp/two_floors_lift_strat.rep".

