const Machines = 2
const Workload = 1
const Capacity = 2
range R_Machines = 0..Machines-1
range R_Ops = 0..Machines
range R_Capacity = 0..Capacity
range R_Workload = 0..Workload
set Global_Alphabet = {idle, get[r:R_Ops], put[r:R_Ops],return[r:R_Ops], reject,accept}
set Controllable_Alphabet = {get[r:R_Ops]}

Machine[id:R_Machines] = Working[0], Working[wl:R_Workload] =
    (	when(wl == 0) idle -> Working[wl] |
	when (wl < Workload) get[id]   -> Working[wl+1] |
     when (wl > 0)        put[id+1] -> Working[wl-1] ).

Buffer[id:R_Machines] = Operative[0],
Operative[c:R_Capacity] = (
    when (c > 0)         get[id+1]    -> Operative[c-1] |
    when (c < Capacity)  {put[id+1],return[id+1]}    -> Operative[c+1] ).

TU = Idle,
  Idle    = (get[Machines] -> Testing),
  Testing = (return_1 -> reject -> Idle |
             accept -> Idle).
/*****************************************************************************/

||Plant = (Machine[p:R_Machines] || Buffer[b:R_Machines] || TU).

fluent F_GOAL = <get_[Machines], {reject,accept}>
fluent F_Get_0 = <get_0, put_1>
|f| ENV = (Plant).


|gr1| <{F_Get_0}><{F_GOAL}>  NO_STRAT = ENV.

