const K = 1
const  Areas = 2*K + 1
const  Init = 0
const  Last = Areas  - 1
const  Center = K
range R_Area = Init..Last
range R_K = 0..(K-1)
range R_Bool = 0..1

set Global_Alphabet = {mouse_move[k:R_K][r:R_Area], cat_move[k:R_K][r:R_Area],rotting[k:R_K]}
set Controllable_Alphabet = {mouse_move[k:R_K][r:R_Area],rotting[k:R_K]}



/*****************************************************************************/

Mouse[id:R_K] = Act[Areas -1][0],
Act[a:R_Area][eaten:R_Bool] = (
	when(eaten == 0) cat_move[r:R_K][c:R_Area] ->Act[a][((a == c) * (c != Center))] |
	when(eaten == 1) cat_move[r:R_K][c:R_Area] ->Act[a][1] |
	when (eaten == 0) mouse_move[id][a] -> Act[a][eaten] |
	when ((eaten == 0)* ((a+1)  <= Last)) mouse_move[id][a+1]  -> Act[a+1][eaten] |
	when ((eaten == 0)* ((a-1)  >= Init)) mouse_move[id][a-1]  -> Act[a-1][eaten] |
	when(eaten == 1) rotting[id] -> Act[a][eaten])+{mouse_move[id][a:R_Area]}.


Mouse_Remove[id:R_K] = Act[Areas -1][0],
Act[a:R_Area][eaten:R_Bool] = (
	when(eaten == 0) cat_move[r:R_K][c:R_Area] ->Act[a][((a == c) * (a != Center))] |
	when(eaten == 1) cat_move[r:R_K][c:R_Area] ->Act[a][1] |
	when (eaten == 0) mouse_move[id][a] -> Act[a][eaten] |
	when ((eaten == 0)* ((a+1)  < Center)) mouse_move[id][a+1]  -> Act[a+1][eaten] |
	when ((eaten == 0)* ((a-1)  > Center)) mouse_move[id][a-1]  -> Act[a-1][eaten] |
	when(eaten == 1) rotting[id] -> Act[a][eaten])+{mouse_move[id][s:R_Area]}.

Cat[id:R_K] = Act[0],
Act[a:R_Area] = (cat_move[id][a] -> Act[a] |
	when ((a+1)  <= Last) cat_move[id][a+1]  -> Act[a+1] |
	when ((a-1) >= Init) cat_move[id][a-1]  -> Act[a-1] )+{cat_move[id][a:R_Area]}.

Cat_Remove[id:R_K] = Act[0],
Act[a:R_Area] = (cat_move[id][a] -> Act[a] |
	when ((a+1)  < Center) cat_move[id][a+1]  -> Act[a+1] |
	when ((a-1) >= Init) cat_move[id][a-1]  -> Act[a-1] )+{cat_move[id][a:R_Area]}.

ARBITER = MOUSE_TURN[0],
MOUSE_TURN[k:R_K] = (when (k < (K-1)){mouse_move[k][r:R_Area],rotting[k]} -> MOUSE_TURN[k+1] | when(k == (K-1)) {mouse_move[k][r:R_Area],rotting[k]} -> CAT_TURN[0]),
CAT_TURN[k:R_K] = ( when (k < (K-1))cat_move[k][r:R_Area] -> CAT_TURN[k+1] | when(k == (K-1)) cat_move[k][r:R_Area] -> MOUSE_TURN[0]).

//*****************************************************************************

||Plant = (Mouse[m:R_K] || Cat[c:R_K]  || ARBITER).
||Remove_Plant  =(Mouse_Remove[m:R_K] || Cat[c:R_K]  || ARBITER).

|F| ENV = (Plant).
|F| REMOVE_ENV = (Remove_Plant).

fluent A_Ass[id:R_K] = <cat_move[id][Center], {cat_move[id][Center-1],cat_move[id][Center+1]}>
fluent A_No_Ass[id:R_K] = <cat_move[id][0], cat_move[id][1]>
fluent G_CAT[id:R_K] = <cat_move[id][Center], {cat_move[id][Center-1],cat_move[id][Center+1]}>
fluent G_MOUSE[id:R_K] = <mouse_move[id][Center], {mouse_move[id][Center-1],mouse_move[id][Center+1],rotting[id]}>


|gr1| <{A_Ass[id:R_K]}><{G_CAT[c:R_K], G_MOUSE[m:R_K]}>  STRAT = ENV.
|gr1| <{A_No_Ass[id:R_K]}><{G_CAT[c:R_K], G_MOUSE[m:R_K]}>  NO_STRAT = ENV.
|gr1| <{A_Ass[id:R_K]}><{G_CAT[c:R_K], G_MOUSE[m:R_K]}>  REMOVE_NO_STRAT = REMOVE_ENV.

//*******************************************
//TESTS

P_ENV = S_0,
S_0 = (mouse_move_0_2-> S_1|mouse_move_0_1-> S_2),
S_1 = (cat_move_0_0-> S_27|cat_move_0_1-> S_15),
S_2 = (cat_move_0_0-> S_3|cat_move_0_1-> S_4),
S_3 = (mouse_move_0_1-> S_29|mouse_move_0_2-> S_28|mouse_move_0_0-> S_30),
S_4 = (mouse_move_0_1-> S_5|mouse_move_0_2-> S_6|mouse_move_0_0-> S_7),
S_5 = (cat_move_0_0-> S_3|cat_move_0_1-> S_4|cat_move_0_2-> S_13),
S_6 = (cat_move_0_0-> S_27|cat_move_0_1-> S_15|cat_move_0_2-> S_16),
S_7 = (cat_move_0_0-> S_8|cat_move_0_1-> S_9|cat_move_0_2-> S_10),
S_8 = (rotting_0-> S_22),
S_9 = (mouse_move_0_0-> S_7|mouse_move_0_1-> S_5),
S_10 = (mouse_move_0_0-> S_11|mouse_move_0_1-> S_12),
S_11 = (cat_move_0_1-> S_9|cat_move_0_2-> S_10),
S_12 = (cat_move_0_1-> S_4|cat_move_0_2-> S_13),
S_13 = (mouse_move_0_1-> S_12|mouse_move_0_2-> S_14|mouse_move_0_0-> S_11),
S_14 = (cat_move_0_1-> S_15|cat_move_0_2-> S_16),
S_15 = (mouse_move_0_2-> S_6|mouse_move_0_1-> S_5),
S_16 = (rotting_0-> S_17),
S_17 = (cat_move_0_1-> S_18|cat_move_0_2-> S_16),
S_18 = (rotting_0-> S_19),
S_19 = (cat_move_0_0-> S_20|cat_move_0_1-> S_18|cat_move_0_2-> S_16),
S_20 = (rotting_0-> S_21),
S_21 = (cat_move_0_0-> S_20|cat_move_0_1-> S_18),
S_22 = (cat_move_0_0-> S_8|cat_move_0_1-> S_23),
S_23 = (rotting_0-> S_24),
S_24 = (cat_move_0_0-> S_8|cat_move_0_1-> S_23|cat_move_0_2-> S_25),
S_25 = (rotting_0-> S_26),
S_26 = (cat_move_0_1-> S_23|cat_move_0_2-> S_25),
S_27 = (mouse_move_0_2-> S_28|mouse_move_0_1-> S_29),
S_28 = (cat_move_0_0-> S_27|cat_move_0_1-> S_15),
S_29 = (cat_move_0_0-> S_3|cat_move_0_1-> S_4),
S_30 = (cat_move_0_0-> S_8|cat_move_0_1-> S_9).

P_STRAT  = S_0,
S_0 = (mouse_move_0_1-> S_1),
S_1 = (cat_move_0_0-> S_5|cat_move_0_1-> S_6),
S_3 = (mouse_move_0_1-> S_45),
S_4 = (mouse_move_0_1-> S_9),
S_5 = (mouse_move_0_2-> S_7),
S_6 = (mouse_move_0_1-> S_9),
S_7 = (cat_move_0_0-> S_3|cat_move_0_1-> S_4),
S_9 = (cat_move_0_0-> S_5|cat_move_0_1-> S_6|cat_move_0_2-> S_12),
S_12 = (mouse_move_0_0-> S_28),
S_22 = (mouse_move_0_1-> S_9),
S_24 = (mouse_move_0_1-> S_27),
S_27 = (cat_move_0_1-> S_6|cat_move_0_2-> S_12),
S_28 = (cat_move_0_1-> S_22|cat_move_0_2-> S_24),
S_45 = (cat_move_0_0-> S_5|cat_move_0_1-> S_6).

P_REMOVE_NO_STRAT  = S_0,
S_0 = (mouse_move_0_2-> S_1),
S_1 = (cat_move_0_0-> S_2),
S_2 = (mouse_move_0_2-> S_11),
S_3 = (mouse_move_0_2-> S_4),
S_4 = (cat_move_0_0-> S_2),
S_11 = (cat_move_0_1-> S_3).

STRAT >> "/tmp/cm_2_test_strat.rep".

// tests
equals FATAL_CAT_MOUSE_ENV_TEST(ENV, P_ENV).
equals FATAL_CAT_MOUSE_STRAT_TEST(STRAT, P_STRAT).
equals FATAL_CAT_MOUSE_REMOVE_NO_STRAT_TEST(REMOVE_NO_STRAT, P_REMOVE_NO_STRAT).



