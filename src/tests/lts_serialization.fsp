//lift example taken from Synthesis of Reactive(1) Designs 2 floors
set Global_Alphabet = {a,b,c,out, out2}
set Controllable_Alphabet = {out, out2}
//|i| GAME_SERIAL in GAME_LTL .


TEST = (<a,b,c,out>->TEST | <b,c>->TEST|out->TEST|out2->TEST|<out,out2>->TEST| <>->TEST
	|<a,b,c,out>->T2 | <b,c>->T2|out->T2|out2->T2|<out,out2>->T2| <>->T2),
T2 = (<a,c,out>-> T2 | <> -> TEST).

|ts| TEST_SERIAL_TICKS in TEST.
//|s| TEST_SERIAL in TEST.
|ti| TEST_INTRLVD_TICKS in TEST.
//|i| TEST_INTRLVD in TEST.

//GAME_SERIAL >> "/tmp/lts_serialization_game_serial.rep".
TEST >> "/tmp/lts_serialization_test.rep".
//TEST_SERIAL >> "/tmp/lts_serialization_test_serial.rep".
TEST_SERIAL_TICKS >> "/tmp/lts_serialization_test_serial_ticks.rep".
//TEST_INTRLVD >> "/tmp/lts_serialization_test_intrleaved.rep".
TEST_INTRLVD_TICKS >> "/tmp/lts_serialization_test_interleaved_ticks.rep".


/*
set Global_Signals	= {b1, b2, f1, f2}
set Output_Signals	= {f1, f2}

ltl env theta Init_Lift_e in GAME_LTL	= (!b1 && !b2).
ltl sys theta Init_Lift_s in GAME_LTL	= (f1 && !f2).
ltl env rho Env_Release_B in GAME_LTL	= [](((b1 && f1)-> X(!b1)) &&((b2 && f2)-> X(!b2))).
ltl env rho Env_Keep_B in GAME_LTL		= [](((b1 && !f1)-> X(b1)) &&((b2 && !f2)-> X(b2))).
ltl sys rho Sys_Mutex in GAME_LTL		= [](!(f1 && f2) && !(X(f1 && f2))).
ltl sys rho Sys_Adj_Floors in GAME_LTL	= []((f1 -> X(f1 || f2)) && (f2 -> X(f1 || f2))).
ltl sys rho Sys_Move_Iff_B in GAME_LTL	= []((f1 && X(f2))->(b1 || b2)).


ltl fluent Ass = (b1 || !b1).
ltl fluent Goal_Back_To_Ground			= (f1 || (b1 || b2)).
ltl fluent Goal_Serve_Request_1			= ((b1->f1)).
ltl fluent Goal_Serve_Request_2			= ((b2->f2)).

|f| ENV =(GAME_LTL).
//|gr1| <{Ass}><{Goal_Serve_Request_1,Goal_Serve_Request_2,Goal_Back_To_Ground}> STRAT = ENV.

|ti| GAME_SERIAL_TICKS in GAME_LTL .
GAME_SERIAL_TICKS >> "/tmp/lts_serialization_game_serial_ticks.rep".

*/
//TESTS
//equals FATAL_Game_Lift_2_FSP_VS_LTL(GAME_LTL, GAME_FSP).
//equals FATAL_Game_Lift_2_STRAT_VS_STRAT_p(STRAT, STRAT_p).
