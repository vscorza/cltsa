// alphabets def.
//set Global_Alphabet = {open_a, compute_a, value_a, close_a,open_b, compute_b, value_b, close_b,composed_value}
set Global_Alphabet = {open_a, value_a, open_b, value_b, composed_value}
set Controllable_Alphabet = {}

// automata def.
//A = (open_a -> compute_a -> value_a -> close_a -> A).
//B = (open_b -> compute_b -> value_b -> close_b -> B).
A = (open_a -> value_a -> A).
B = (open_b -> value_b -> B).
SERVER = (<value_a,value_b>->composed_value->SERVER).

||SYS_1_a =  (B || (SERVER || A)).
||SYS_1_s =  (B ||_s SERVER ||_s A).
||SYS_1_c =  (B ||_c SERVER ||_c A).

||AB_a =  (A || B).
||SYS_2_a =  (SERVER || AB_a).
||AB_s =  (A ||_s B).
||SYS_2_s =  (SERVER ||_s AB_s).
||AB_c =  (A ||_c B).
||SYS_2_c =  (SERVER ||_c AB_c).

||SERVER_A_a =  (SERVER || A).
||SYS_3_a =  (SERVER_A_a || B).
||SERVER_A_s =  (SERVER ||_s A).
||SYS_3_s =  (SERVER_A_s ||_s B).
||SERVER_A_c =  (SERVER ||_c A).
||SYS_3_c =  (SERVER_A_c ||_c B).

// tests
/*
equals FATAL_Partial_Asynch_1_2(SYS_1, SYS_2).
equals FATAL_Partial_Asynch_1_3(SYS_1, SYS_3).
equals FATAL_Partial_Asynch_2_3(SYS_2, SYS_3).
*/