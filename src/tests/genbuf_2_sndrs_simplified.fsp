//GenBuf example taken from Synthesis of Reactive(1) Designs 2 senders
set Global_Alphabet = {}
set Controllable_Alphabet = {}

set Global_Signals	= {sToB_REQ_0, sToB_REQ_1, bToS_ACK_0, bToS_ACK_1, bToR_REQ_0, bToR_REQ_1, rToB_ACK_0, rToB_ACK_1}
set Output_Signals	= {bToS_ACK_0, bToS_ACK_1, bToR_REQ_0, bToR_REQ_1}
order			= {sToB_REQ_0 < sToB_REQ_1 < rToB_ACK_0 < rToB_ACK_1 < bToS_ACK_0 < bToS_ACK_1 < bToR_REQ_0 < bToR_REQ_1}

/***********
**** THETA
***********/
ltl env theta Init_Buffer_e in GENBUF	= (!sToB_REQ_0 && !sToB_REQ_1 && !rToB_ACK_0 && !rToB_ACK_1).
ltl sys theta Init_Buffer_s in GENBUF	= (!bToS_ACK_0 && !bToS_ACK_1 && !bToR_REQ_0 && !bToR_REQ_1).
/***********
**** SYS RHO
***********/
//bToS_ACK only if sToB_REQ
ltl sys rho G_3_sndr_0 in GENBUF		= []((!bToS_ACK_0 && X(bToS_ACK_0)) -> sToB_REQ_0).
ltl sys rho G_3_sndr_1 in GENBUF		= []((!bToS_ACK_1 && X(bToS_ACK_1)) -> sToB_REQ_1).
//keep bToS_ACK up if sToB_REQ still going
ltl sys rho G_4_sndr_0 in GENBUF		= []((bToS_ACK_0 && sToB_REQ_0) -> X(bToS_ACK_0)).
ltl sys rho G_4_sndr_1 in GENBUF		= []((bToS_ACK_1 && sToB_REQ_1) -> X(bToS_ACK_1)).
//mutex bToS_ACK
ltl sys rho G_5 in GENBUF			= [](!(bToS_ACK_0 && bToS_ACK_1)).
ltl sys rho G_5_X in GENBUF			= [](X(!(bToS_ACK_0 && bToS_ACK_1))).
//mutex bToR_REQ
ltl sys rho G_5_b_1_rcvr_0 in GENBUF		= [](!(bToR_REQ_0 && bToR_REQ_1)).
ltl sys rho G_5_b_1_rcvr_0 in GENBUF		= [](X(!(bToR_REQ_0 && bToR_REQ_1))).
//keep bToR_REQ if not yet ack
ltl sys rho G_6_1_rcvr_0 in GENBUF		= []((bToR_REQ_0 && !rToB_ACK_0) -> X(bToR_REQ_0)).
ltl sys rho G_6_1_rcvr_1 in GENBUF		= []((bToR_REQ_1 && !rToB_ACK_1) -> X(bToR_REQ_1)).
//lower bToR_REQ when rToB_ACK received
ltl sys rho G_8_rcvr_0 in GENBUF		= [](rToB_ACK_0 -> X(!bToR_REQ_0)).
ltl sys rho G_8_rcvr_1 in GENBUF		= [](rToB_ACK_1 -> X(!bToR_REQ_1)).
//bToS_ACK raises iff enq

/***********
**** ENV RHO
***********/

//keep sToB_REQ if not yet ACK'd
ltl env rho A_1_1_sndr_0 in GENBUF		= []((sToB_REQ_0 && !bToS_ACK_0) -> X(sToB_REQ_0)).
ltl env rho A_1_1_sndr_1 in GENBUF		= []((sToB_REQ_1 && !bToS_ACK_1) -> X(sToB_REQ_1)).
//lower sToB_REQ once ACK'd
ltl env rho A_1_2_sndr_0 in GENBUF		= [](bToS_ACK_0 -> X(!sToB_REQ_0)).
ltl env rho A_1_2_sndr_1 in GENBUF		= [](bToS_ACK_1 -> X(!sToB_REQ_1)).

//keep rToB_ACK if still REQ's
ltl env rho A_3_rcvr_0 in GENBUF		= []((bToR_REQ_0 && rToB_ACK_0) -> X(rToB_ACK_0)).
ltl env rho A_3_rcvr_1 in GENBUF		= []((bToR_REQ_1 && rToB_ACK_1) -> X(rToB_ACK_1)).
//rToB_ACK if REQ'd
ltl env rho A_4_rcvr_0 in GENBUF		= [](X(rToB_ACK_0) -> bToR_REQ_0).
ltl env rho A_4_rcvr_1 in GENBUF		= [](X(rToB_ACK_1) -> bToR_REQ_1).


/***********
**** AUTOMATA
***********/
//G_7 was turned into an automaton
G_7_ROUND_ROBIN	= (bToR_REQ_0.on -> bToR_REQ_1.on -> G_7_ROUND_ROBIN).

/***********
**** FLUENTS
***********/
//G_12 was turned into a fluent
fluent F_Goal_12 = <{deq.on,empty.on}, empty.off> initially 1

ltl fluent G_1_2_sndr_0		= (sToB_REQ_0 <-> bToS_ACK_0).
ltl fluent G_1_2_sndr_1		= (sToB_REQ_1 <-> bToS_ACK_1).
ltl fluent A_2_sndr_0		= (bToR_REQ_0 <-> rToB_ACK_0).
ltl fluent A_2_sndr_1		= (bToR_REQ_1 <-> rToB_ACK_1).

/***********
**** SYNTHESIS
***********/
|f| ENV =(GENBUF || G_7_ROUND_ROBIN).
|gr1| <{A_2_sndr_0, A_2_sndr_1}><{F_Goal_12, G_1_2_sndr_0, G_1_2_sndr_1}> STRAT = ENV.
//|gr1| <{A_2_sndr_0, A_2_sndr_1}><{G_1_2_sndr_0, G_1_2_sndr_1}> STRAT = ENV.

