//GenBuf example taken from Synthesis of Reactive(1) Designs 2 senders
set Global_Alphabet = {}
set Controllable_Alphabet = {}

set Global_Signals	= {sToB_REQ_0, sToB_REQ_1, bToS_ACK_0, bToS_ACK_1, bToR_REQ_0, bToR_REQ_1, rToB_ACK_0, rToB_ACK_1}
set Output_Signals	= {bToS_ACK_0, bToS_ACK_1, bToR_REQ_0, bToR_REQ_1}
order			= {sToB_REQ_0 < sToB_REQ_1 < rToB_ACK_0 < rToB_ACK_1 < bToS_ACK_0 < bToS_ACK_1 < bToR_REQ_0 < bToR_REQ_1}

/***********
**** THETA
***********/
ltl env theta Init_Buffer_e in GENBUF	= (!sToB_REQ_0 && !sToB_REQ_1 && !rToB_ACK_0 && !rToB_ACK_1).
ltl sys theta Init_Buffer_s in GENBUF	= (!bToS_ACK_0 && !bToS_ACK_1 && !bToR_REQ_0 && !bToR_REQ_1).
/***********
**** SYS RHO
***********/
//bToS_ACK only if sToB_REQ
ltl sys rho G_3_sndr_0 in GENBUF		= []((!bToS_ACK_0 && X(bToS_ACK_0)) -> sToB_REQ_0).
ltl sys rho G_3_sndr_1 in GENBUF		= []((!bToS_ACK_1 && X(bToS_ACK_1)) -> sToB_REQ_1).
//keep bToS_ACK up if sToB_REQ still going
ltl sys rho G_4_sndr_0 in GENBUF		= []((bToS_ACK_0 && sToB_REQ_0) -> X(bToS_ACK_0)).
ltl sys rho G_4_sndr_1 in GENBUF		= []((bToS_ACK_1 && sToB_REQ_1) -> X(bToS_ACK_1)).
//mutex bToS_ACK
ltl sys rho G_5 in GENBUF			= [](!(bToS_ACK_0 && bToS_ACK_1)).
ltl sys rho G_5_X in GENBUF			= [](X(!(bToS_ACK_0 && bToS_ACK_1))).
//mutex bToR_REQ
ltl sys rho G_5_b_1_rcvr_0 in GENBUF		= [](!(bToR_REQ_0 && bToR_REQ_1)).
ltl sys rho G_5_b_1_rcvr_0 in GENBUF		= [](X(!(bToR_REQ_0 && bToR_REQ_1))).
//keep bToR_REQ if not yet ack
ltl sys rho G_6_1_rcvr_0 in GENBUF		= []((bToR_REQ_0 && !rToB_ACK_0) -> X(bToR_REQ_0)).
ltl sys rho G_6_1_rcvr_1 in GENBUF		= []((bToR_REQ_1 && !rToB_ACK_1) -> X(bToR_REQ_1)).
//lower bToR_REQ when rToB_ACK received
ltl sys rho G_8_rcvr_0 in GENBUF		= [](rToB_ACK_0 -> X(!bToR_REQ_0)).
ltl sys rho G_8_rcvr_1 in GENBUF		= [](rToB_ACK_1 -> X(!bToR_REQ_1)).
//bToS_ACK raises iff enq

/***********
**** ENV RHO
***********/

//keep sToB_REQ if not yet ACK'd
ltl env rho A_1_1_sndr_0 in GENBUF		= []((sToB_REQ_0 && !bToS_ACK_0) -> X(sToB_REQ_0)).
ltl env rho A_1_1_sndr_1 in GENBUF		= []((sToB_REQ_1 && !bToS_ACK_1) -> X(sToB_REQ_1)).
//lower sToB_REQ once ACK'd
ltl env rho A_1_2_sndr_0 in GENBUF		= [](bToS_ACK_0 -> X(!sToB_REQ_0)).
ltl env rho A_1_2_sndr_1 in GENBUF		= [](bToS_ACK_1 -> X(!sToB_REQ_1)).

//keep rToB_ACK if still REQ's
ltl env rho A_3_rcvr_0 in GENBUF		= []((bToR_REQ_0 && rToB_ACK_0) -> X(rToB_ACK_0)).
ltl env rho A_3_rcvr_1 in GENBUF		= []((bToR_REQ_1 && rToB_ACK_1) -> X(rToB_ACK_1)).
//rToB_ACK if REQ'd
ltl env rho A_4_rcvr_0 in GENBUF		= [](X(rToB_ACK_0) -> bToR_REQ_0).
ltl env rho A_4_rcvr_1 in GENBUF		= [](X(rToB_ACK_1) -> bToR_REQ_1).


/***********
**** AUTOMATA
***********/
//G_7 was turned into an automaton
G_7_ROUND_ROBIN	= (bToR_REQ_0.on -> bToR_REQ_1.on -> G_7_ROUND_ROBIN).

/***********
**** FLUENTS
***********/
//G_12 was turned into a fluent

DIAG = S_0,
S_0 = (<>-> S_1),
S_1 = (<>-> S_2),
S_2 = (<sToB_REQ_0.on,sToB_REQ_1.on>-> S_6),
S_6 = (bToR_REQ_0.on-> S_8),
S_8 = (<>-> S_9),
S_9 = (bToS_ACK_0.on-> S_620|bToS_ACK_1.on-> S_428),
S_16 = (rToB_ACK_0.off-> S_17),
S_17 = (bToS_ACK_1.off-> S_145),
S_21 = (<>-> S_22),
S_22 = (<bToR_REQ_0.on,bToR_REQ_1.off>-> S_28),
S_28 = (rToB_ACK_1.off-> S_29),
S_29 = (<bToS_ACK_0.on,bToS_ACK_1.off>-> S_83),
S_33 = (<>-> S_34),
S_34 = (<bToR_REQ_0.off,bToR_REQ_1.on>-> S_40),
S_40 = (<rToB_ACK_0.off,rToB_ACK_1.on>-> S_42),
S_42 = (<bToS_ACK_0.on,bToS_ACK_1.off>-> S_44),
S_44 = (<sToB_REQ_0.off,sToB_REQ_1.on>-> S_789),
S_45 = (<>-> S_46),
S_46 = (<bToR_REQ_0.on,bToR_REQ_1.off>-> S_52),
S_52 = (<rToB_ACK_0.on,rToB_ACK_1.off>-> S_54),
S_54 = (<bToS_ACK_0.on,bToS_ACK_1.off>-> S_56),
S_56 = (<sToB_REQ_0.off,sToB_REQ_1.on>-> S_767),
S_57 = (<>-> S_58),
S_58 = (<bToR_REQ_0.off,bToR_REQ_1.on>-> S_16),
S_67 = (<>-> S_68),
S_68 = (<bToR_REQ_0.on,bToR_REQ_1.off,bToS_ACK_0.off,bToS_ACK_1.on>-> S_74),
S_71 = (rToB_ACK_1.off-> S_751),
S_74 = (<rToB_ACK_0.on,rToB_ACK_1.off,sToB_REQ_0.on,sToB_REQ_1.off>-> S_78),
S_78 = (<>-> S_33),
S_83 = (<rToB_ACK_0.on,sToB_REQ_0.off,sToB_REQ_1.on>-> S_87),
S_87 = (<>-> S_88),
S_88 = (<>-> S_89),
S_89 = (<bToR_REQ_0.off,bToR_REQ_1.on,bToS_ACK_0.off,bToS_ACK_1.on>-> S_95),
S_95 = (<rToB_ACK_0.off,rToB_ACK_1.on,sToB_REQ_0.on,sToB_REQ_1.off>-> S_99),
S_99 = (<>-> S_45),
S_113 = (rToB_ACK_1.off-> S_721),
S_114 = (rToB_ACK_1.off-> S_719),
S_130 = (<>-> S_131),
S_131 = (bToR_REQ_0.off-> S_133|<bToR_REQ_0.off,bToR_REQ_1.on>-> S_136),
S_133 = (rToB_ACK_0.off-> S_710),
S_136 = (rToB_ACK_0.off-> S_702),
S_142 = (<>-> S_143),
S_143 = (<bToS_ACK_0.on,bToS_ACK_1.off>-> S_146),
S_145 = (<rToB_ACK_1.on,sToB_REQ_1.on>-> S_701),
S_146 = (<rToB_ACK_1.on,sToB_REQ_0.off,sToB_REQ_1.on>-> S_150),
S_150 = (<>-> S_67),
S_151 = (<>-> S_152),
S_152 = (bToS_ACK_0.off-> S_459),
S_219 = (<rToB_ACK_0.off,rToB_ACK_1.on>-> S_628),
S_249 = (rToB_ACK_0.on-> S_251),
S_251 = (bToS_ACK_0.off-> S_252|<bToS_ACK_0.off,bToS_ACK_1.on>-> S_253),
S_252 = (sToB_REQ_0.on-> S_257),
S_253 = (<sToB_REQ_0.on,sToB_REQ_1.off>-> S_255),
S_255 = (<bToR_REQ_0.off,bToR_REQ_1.on>-> S_16),
S_257 = (bToR_REQ_0.off-> S_258|<bToR_REQ_0.off,bToR_REQ_1.on>-> S_260),
S_258 = (rToB_ACK_0.off-> S_615),
S_260 = (<rToB_ACK_0.off,rToB_ACK_1.on>-> S_265),
S_265 = (bToS_ACK_0.on-> S_267|bToS_ACK_1.on-> S_268),
S_267 = (sToB_REQ_0.off-> S_270),
S_268 = (sToB_REQ_1.off-> S_269),
S_269 = (<bToR_REQ_0.on,bToR_REQ_1.off>-> S_28),
S_270 = (bToR_REQ_1.off-> S_71),
S_288 = (rToB_ACK_0.on-> S_290),
S_290 = (bToS_ACK_0.off-> S_291),
S_291 = (sToB_REQ_0.on-> S_296),
S_296 = (<bToR_REQ_0.off,bToR_REQ_1.on>-> S_219),
S_390 = (sToB_REQ_0.off-> S_391),
S_391 = (bToR_REQ_1.off-> S_113),
S_428 = (<rToB_ACK_0.on,sToB_REQ_1.off>-> S_430),
S_430 = (<>-> S_57),
S_431 = (<rToB_ACK_0.on,sToB_REQ_0.on,sToB_REQ_1.off>-> S_435),
S_435 = (<>-> S_57),
S_459 = (<rToB_ACK_1.on,sToB_REQ_0.on>-> S_463),
S_463 = (bToS_ACK_1.on-> S_268),
S_473 = (<rToB_ACK_1.on,sToB_REQ_0.on,sToB_REQ_1.off>-> S_477),
S_477 = (<>-> S_21),
S_513 = (<sToB_REQ_0.on,sToB_REQ_1.off>-> S_515),
S_515 = (bToR_REQ_1.on-> S_142),
S_532 = (sToB_REQ_0.off-> S_535),
S_535 = (bToR_REQ_1.on-> S_151),
S_615 = (bToS_ACK_0.on-> S_532),
S_620 = (<rToB_ACK_0.on,sToB_REQ_0.off>-> S_622),
S_622 = (<>-> S_130),
S_628 = (bToS_ACK_0.on-> S_390),
S_701 = (bToS_ACK_0.on-> S_267),
S_702 = (<bToS_ACK_0.off,bToS_ACK_1.on>-> S_473),
S_710 = (<bToS_ACK_0.off,bToS_ACK_1.on>-> S_513),
S_719 = (<bToS_ACK_0.off,bToS_ACK_1.on>-> S_431),
S_721 = (bToR_REQ_0.on-> S_249),
S_751 = (bToR_REQ_0.on-> S_288),
S_767 = (<bToR_REQ_0.off,bToR_REQ_1.on>-> S_136),
S_789 = (<bToR_REQ_0.on,bToR_REQ_1.off>-> S_114).


fluent F_Goal_12 = <{deq.on,empty.on}, empty.off> initially 1

ltl fluent G_1_2_sndr_0		= (sToB_REQ_0 <-> bToS_ACK_0).
ltl fluent G_1_2_sndr_1		= (sToB_REQ_1 <-> bToS_ACK_1).
ltl fluent A_2_sndr_0		= (bToR_REQ_0 <-> rToB_ACK_0).
ltl fluent A_2_sndr_1		= (bToR_REQ_1 <-> rToB_ACK_1).


/***********
**** SYNTHESIS
***********/

|f| ENV =(GENBUF || G_7_ROUND_ROBIN).
//|gr1| <{A_2_sndr_0, A_2_sndr_1}><{F_Goal_12, G_1_2_sndr_0, G_1_2_sndr_1}> STRAT = ENV.
|gr1| <{A_2_sndr_0, A_2_sndr_1}><{G_1_2_sndr_0, G_1_2_sndr_1}> STRAT = ENV.



// tests
equals FATAL_Genbuf_2_Sndrs_Diag(STRAT,DIAG).
