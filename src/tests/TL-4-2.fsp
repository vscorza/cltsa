const Machines = 4
const Workload = 1
const Capacity = 1
range R_Machines = 0..Machines
range R_Capacity = 0..Capacity
range R_Workload = 0..Workload
set Global_Alphabet = {idle, get_0, get_1,put_1,get_2,put_2,get_3,put_3,get_4,put_4,return_1, reject,accept}
set Controllable_Alphabet = {get_0,get_1,get_2,get_3,get_4}

Machine_0 = Working[0], Working[wl:R_Workload] =
    (	when(wl == 0) idle -> Working[wl] |
	when (wl < Workload) get_0   -> Working[wl+1] |
     when (wl > 0)        put_1 -> Working[wl-1] ).
Machine_1 = Working[0], Working[wl:R_Workload] =
    (	when (wl < Workload) get_1   -> Working[wl+1] |
     when (wl > 0)        put_2 -> Working[wl-1] ).
Machine_2 = Working[0], Working[wl:R_Workload] =
    (	when (wl < Workload) get_2   -> Working[wl+1] |
     when (wl > 0)        put_3 -> Working[wl-1] ).
Machine_3 = Working[0], Working[wl:R_Workload] =
    (	when (wl < Workload) get_3   -> Working[wl+1] |
     when (wl > 0)        put_4 -> Working[wl-1] ).

Buffer_1 = Operative[0],
Operative[c:R_Capacity] = (
    when (c > 0)         get_1    -> Operative[c-1] |
    when (c < Capacity)  {put_1,return_1}    -> Operative[c+1] ).
Buffer_2 = Operative[0],
Operative[c:R_Capacity] = (
    when (c > 0)         get_2    -> Operative[c-1] |
    when (c < Capacity)  put_2    -> Operative[c+1] ).
Buffer_3 = Operative[0],
Operative[c:R_Capacity] = (
    when (c > 0)         get_3    -> Operative[c-1] |
    when (c < Capacity)  put_3    -> Operative[c+1] ).
Buffer_4 = Operative[0],
Operative[c:R_Capacity] = (
    when (c > 0)         get_4    -> Operative[c-1] |
    when (c < Capacity)  put_4    -> Operative[c+1] ).


TU = Idle,
  Idle    = (get_4 -> Testing),
  Testing = (return_1 -> reject -> Idle |
             accept -> Idle).


/*****************************************************************************/

||Plant_1 = (Machine_0 || Buffer_1).
||Plant_2 = (Machine_1 || Buffer_2).
||Plant_3 = (Machine_2 || Buffer_3).
||Plant_4 = (Machine_3 || Buffer_4).
||Plant_T = (Plant_1 || Plant_2 || Plant_3 || Plant_4 ||  TU).


fluent F_GOAL = <get_1, {reject,accept}>
fluent F_Ass = <accept, reject> initially 1
fluent F_Get_0 = <get_0, put_1>

|f| ENV = (Plant_T).

|gr1| <{F_Ass,F_Get_0}><{F_GOAL}>  STRAT = ENV.
|gr1| <{F_Ass}><{F_GOAL}>  NO_STRAT = ENV.
STRAT >> "/tmp/TL_4_2_strat.rep".
STRAT >>_m "/tmp/TL_4_2_strat.met".
NO_STRAT >> "/tmp/TL_4_2_diag.rep".
NO_STRAT >>_m "/tmp/TL_4_2_diag.met".
ENV >>_m "/tmp/tl_4_2_env.met".
