const Machines = 4
const Workload = 2
const Capacity = 2
range R_Machines = 0..Machines
range R_Capacity = 0..Capacity
range R_Workload = 0..Workload
set Global_Alphabet = {get_1,put_1,get_2,put_2,get_3,put_3,get_4,put_4,return_1, return_2, return_3, return_4, reject,accept}
set Controllable_Alphabet = {get_1,get_2,get_3,get_4}

Machine_0 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_1   -> Working[wl+1] |
     when (wl > 0)        put_2 -> Working[wl-1] ).
Machine_1 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_1   -> Working[wl+1] |
     when (wl > 0)        put_2 -> Working[wl-1] ).
Machine_2 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_2   -> Working[wl+1] |
     when (wl > 0)        put_3 -> Working[wl-1] ).     
Machine_3 = Working[0], Working[wl:R_Workload] =
    (when (wl < Workload) get_3   -> Working[wl+1] |
     when (wl > 0)        put_4 -> Working[wl-1] ).     

TU = Idle,
  Idle    = (get_4 -> Testing | return_2 -> Idle | return_3 -> Idle| return_4 -> Idle),
  Testing = (return_1 -> reject -> Idle |
             accept -> Idle | return_2 -> Testing | return_3 -> Testing| return_4 -> Testing).



Buffer_1 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_1    -> Operative[c-1] |
    when (c == 0)        get_1    -> ERROR          |
    when (c < Capacity)  put_1    -> Operative[c+1] |
    when (c == Capacity) put_1    -> ERROR          |
    when (c < Capacity)  return_1 -> Operative[c+1] |
    when (c == Capacity) return_1 -> ERROR          ).
Buffer_2 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_2    -> Operative[c-1] |
    when (c == 0)        get_2    -> ERROR          |
    when (c < Capacity)  put_2    -> Operative[c+1] |
    when (c == Capacity) put_2    -> ERROR          |
    when (c < Capacity)  return_2 -> Operative[c+1] |
    when (c == Capacity) return_2 -> ERROR          ).
Buffer_3 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_3    -> Operative[c-1] |
    when (c == 0)        get_3    -> ERROR          |
    when (c < Capacity)  put_3    -> Operative[c+1] |
    when (c == Capacity) put_3    -> ERROR          |
    when (c < Capacity)  return_3 -> Operative[c+1] |
    when (c == Capacity) return_3 -> ERROR          ).    
Buffer_4 = Operative[0],
  Operative[c:R_Capacity] = (
    when (c > 0)         get_4    -> Operative[c-1] |
    when (c == 0)        get_4    -> ERROR          |
    when (c < Capacity)  put_4    -> Operative[c+1] |
    when (c == Capacity) put_4    -> ERROR          |
    when (c < Capacity)  return_4 -> Operative[c+1] |
    when (c == Capacity) return_4 -> ERROR          ).    

/*****************************************************************************/

fluent F_GOAL = <get_4, {reject,accept}>
fluent F_Ass = <accept, reject> initially 1

||Plant_1 = (Machine_0 || Buffer_1).
||Plant_2 = (Machine_1 || Buffer_2).
||Plant_3 = (Machine_2 || Buffer_3).
||Plant_4 = (Machine_3 || Buffer_4).

||Plant = (Plant_1 || Plant_2 || Plant_3 || Plant_4 || TU).

Plant >>_m "/tmp/TL_4_2.met".

|F| NO_MIXED_ENV = (Plant).

|gr1| <{F_Ass}><{F_GOAL}>  STRAT = NO_MIXED_ENV.

STRAT >> "/tmp/TL_4_2_strat.rep".
STRAT >>_m "/tmp/TL_4_2_strat.met".
